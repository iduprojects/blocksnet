Search.setIndex({"docnames": ["about_us", "api/_autosummary/blocksnet.method", "api/_autosummary/blocksnet.method.accessibility", "api/_autosummary/blocksnet.method.annealing_optimizer", "api/_autosummary/blocksnet.method.base_method", "api/_autosummary/blocksnet.method.centrality", "api/_autosummary/blocksnet.method.connectivity", "api/_autosummary/blocksnet.method.diversity", "api/_autosummary/blocksnet.method.integration", "api/_autosummary/blocksnet.method.land_use_prediction", "api/_autosummary/blocksnet.method.population_centrality", "api/_autosummary/blocksnet.method.provision", "api/_autosummary/blocksnet.method.spacematrix", "api/_autosummary/blocksnet.method.vacant_area", "api/_autosummary/blocksnet.models", "api/_autosummary/blocksnet.models.city", "api/_autosummary/blocksnet.models.land_use", "api/_autosummary/blocksnet.models.schema", "api/_autosummary/blocksnet.models.service_type", "api/_autosummary/blocksnet.preprocessing", "api/_autosummary/blocksnet.preprocessing.accessibility_processor", "api/_autosummary/blocksnet.preprocessing.blocks_generator", "api/_autosummary/blocksnet.preprocessing.blocks_splitter", "api/_autosummary/blocksnet.preprocessing.land_use_optimizer", "api/_autosummary/blocksnet.preprocessing.land_use_processor", "api/_autosummary/blocksnet.utils", "api/_autosummary/blocksnet.utils.helpers", "api/_autosummary/blocksnet.utils.service_types", "api/index", "blocksnet/contributing", "blocksnet/faq", "blocksnet/index", "blocksnet/quickstart", "examples/accessibility_processor", "examples/blocks_generator", "examples/cases/index", "examples/cases/land_use_optimization", "examples/city", "examples/index", "examples/methods/accessibility", "examples/methods/annealing_optimizer", "examples/methods/centrality", "examples/methods/connectivity", "examples/methods/diversity", "examples/methods/index", "examples/methods/integration", "examples/methods/land_use_prediction", "examples/methods/provision", "examples/methods/spacematrix", "examples/methods/vacant_area", "examples/pipeline", "index"], "filenames": ["about_us.rst", "api/_autosummary/blocksnet.method.rst", "api/_autosummary/blocksnet.method.accessibility.rst", "api/_autosummary/blocksnet.method.annealing_optimizer.rst", "api/_autosummary/blocksnet.method.base_method.rst", "api/_autosummary/blocksnet.method.centrality.rst", "api/_autosummary/blocksnet.method.connectivity.rst", "api/_autosummary/blocksnet.method.diversity.rst", "api/_autosummary/blocksnet.method.integration.rst", "api/_autosummary/blocksnet.method.land_use_prediction.rst", "api/_autosummary/blocksnet.method.population_centrality.rst", "api/_autosummary/blocksnet.method.provision.rst", "api/_autosummary/blocksnet.method.spacematrix.rst", "api/_autosummary/blocksnet.method.vacant_area.rst", "api/_autosummary/blocksnet.models.rst", "api/_autosummary/blocksnet.models.city.rst", "api/_autosummary/blocksnet.models.land_use.rst", "api/_autosummary/blocksnet.models.schema.rst", "api/_autosummary/blocksnet.models.service_type.rst", "api/_autosummary/blocksnet.preprocessing.rst", "api/_autosummary/blocksnet.preprocessing.accessibility_processor.rst", "api/_autosummary/blocksnet.preprocessing.blocks_generator.rst", "api/_autosummary/blocksnet.preprocessing.blocks_splitter.rst", "api/_autosummary/blocksnet.preprocessing.land_use_optimizer.rst", "api/_autosummary/blocksnet.preprocessing.land_use_processor.rst", "api/_autosummary/blocksnet.utils.rst", "api/_autosummary/blocksnet.utils.helpers.rst", "api/_autosummary/blocksnet.utils.service_types.rst", "api/index.rst", "blocksnet/contributing.rst", "blocksnet/faq.rst", "blocksnet/index.rst", "blocksnet/quickstart.rst", "examples/accessibility_processor.nblink", "examples/blocks_generator.nblink", "examples/cases/index.rst", "examples/cases/land_use_optimization.nblink", "examples/city.nblink", "examples/index.rst", "examples/methods/accessibility.nblink", "examples/methods/annealing_optimizer.nblink", "examples/methods/centrality.nblink", "examples/methods/connectivity.nblink", "examples/methods/diversity.nblink", "examples/methods/index.rst", "examples/methods/integration.nblink", "examples/methods/land_use_prediction.nblink", "examples/methods/provision.nblink", "examples/methods/spacematrix.nblink", "examples/methods/vacant_area.nblink", "examples/pipeline.nblink", "index.rst"], "titles": ["About us", "blocksnet.method", "blocksnet.method.accessibility", "blocksnet.method.annealing_optimizer", "blocksnet.method.base_method", "blocksnet.method.centrality", "blocksnet.method.connectivity", "blocksnet.method.diversity", "blocksnet.method.integration", "blocksnet.method.land_use_prediction", "blocksnet.method.population_centrality", "blocksnet.method.provision", "blocksnet.method.spacematrix", "blocksnet.method.vacant_area", "blocksnet.models", "blocksnet.models.city", "blocksnet.models.land_use", "blocksnet.models.schema", "blocksnet.models.service_type", "blocksnet.preprocessing", "blocksnet.preprocessing.accessibility_processor", "blocksnet.preprocessing.blocks_generator", "blocksnet.preprocessing.blocks_splitter", "blocksnet.preprocessing.land_use_optimizer", "blocksnet.preprocessing.land_use_processor", "blocksnet.utils", "blocksnet.utils.helpers", "blocksnet.utils.service_types", "API documentation", "Contributing", "FAQ", "BlocksNet", "Quickstart", "Generating intermodal graph and calculating accessibility matrix", "City blocks layer generating", "Cases", "Land Use Optimization", "City initialization and methods", "Examples", "Accessibility", "Annealing optimizer", "Centrality", "Connectivity", "Diversity", "Methods", "Integration", "LandUse prediction", "Provision", "Spacematrix", "Vacant Area", "Pipeline", "Welcome to BlocksNet documentation!"], "terms": {"The": [0, 2, 3, 7, 8, 10, 11, 12, 13, 15, 20, 22, 23, 28, 35, 36, 37, 38, 40, 44, 45, 50, 51], "blocksnet": [0, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49], "i": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 15, 18, 20, 22, 23, 24, 29, 31, 36, 37, 40, 45, 50, 51], "develop": [0, 18, 29, 50, 51], "maintain": [0, 29], "idu": 0, "team": 0, "institut": 0, "design": 0, "urban": [0, 5, 10, 11, 12, 18, 20, 23, 30, 36, 51], "studi": 0, "an": [0, 2, 3, 8, 10, 13, 18, 20, 23, 29, 30, 47, 51], "educ": [0, 11], "project": [0, 26, 29, 34, 50, 51], "research": 0, "unit": [0, 18, 29, 36, 51], "itmo": [0, 51], "univers": [0, 36, 37, 40, 51], "aim": [0, 40, 51], "interdisciplinari": 0, "compet": 0, "scientif": 0, "approach": 0, "solv": [0, 11, 47, 50, 51], "complex": 0, "problem": [0, 11, 47, 50, 51], "us": [0, 1, 3, 4, 7, 8, 9, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 40, 50, 51], "inform": [0, 3, 15, 18, 24, 31, 37, 50, 51], "technologi": 0, "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 29, 47, 50, 51], "principl": 0, "sustain": 0, "social": 0, "orient": [0, 50, 51], "you": [0, 29, 37, 50], "can": [0, 2, 4, 11, 15, 18, 21, 26, 29, 32, 36, 37, 50, 51], "nccr": 0, "nation": 0, "center": 0, "cognit": 0, "tatiana": 0, "churiakova": 0, "manag": [0, 15], "vasilii": 0, "starikov": 0, "lead": 0, "softwar": 0, "engin": 0, "also": [0, 9, 29, 36, 50, 51], "ar": [0, 1, 3, 9, 11, 13, 15, 21, 23, 26, 28, 29, 50], "welcom": [0, 29], "our": [0, 50], "issu": [0, 29], "section": [0, 29], "t": [0, 29, 36, 37, 50], "v": [0, 36], "sudakova": 0, "morozov": 0, "A": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 23], "mityagin": 0, "": [0, 3, 8, 15, 23, 29, 34, 36, 37, 40, 46, 50], "digit": 0, "master": [0, 29, 30, 51], "plan": [0, 30, 51], "tool": [0, 51], "gener": [0, 3, 8, 11, 15, 20, 21, 23, 30, 38, 51], "territori": [0, 15, 20, 21, 40, 51], "requir": [0, 4, 18, 29, 30, 50, 51], "intern": 0, "confer": 0, "advanc": [0, 50, 51], "innov": 0, "2023": 0, "artii": 0, "provid": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 20, 21, 50, 51], "locat": [1, 3, 15, 22, 36, 49, 50], "here": [1, 50], "onli": [1, 50], "initi": [1, 3, 15, 19, 23, 36, 38, 51], "citi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 21, 27, 32, 36, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 51], "model": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 19, 23, 24, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51], "modul": [1, 3, 11, 14, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 32], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 32, 50], "city_model": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50], "verbos": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 23, 36], "bool": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 23], "true": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 20, 23, 34, 36, 37, 40, 45, 47, 49, 50], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 29, 30, 51], "basemethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "block": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 19, 20, 21, 22, 23, 24, 32, 36, 37, 38, 39, 40, 45, 47, 49, 51], "assess": [2, 3, 6, 7, 11, 47, 50, 51], "plot": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50], "gdf": [2, 5, 6, 7, 8, 9, 10, 11, 12, 15, 22, 26], "vmax": [2, 47], "figsiz": [2, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 34, 36, 37, 39, 41, 42, 43, 47, 48, 50], "10": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 23, 33, 34, 36, 37, 39, 41, 42, 43, 46, 47, 48, 49, 50], "data": [2, 3, 5, 6, 7, 10, 11, 12, 15, 20, 22, 24, 33, 34, 36, 37, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51], "map": [2, 3, 5, 6, 7, 10, 12, 15, 20, 23, 24, 49], "calcul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51], "from": [2, 8, 11, 15, 20, 22, 23, 24, 29, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51], "given": [2, 3, 7, 11, 12, 15, 20, 23, 26], "static": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 21, 22, 23], "geodatafram": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 20, 21, 22, 23, 24, 26, 36, 37, 49, 50], "float": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 26, 37, 50], "60": [2, 36, 47, 50], "linewidth": [2, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 34, 37, 47], "0": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 22, 23, 24, 33, 34, 36, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49], "1": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 23, 24, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49], "tupl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 23], "int": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 37, 50], "paramet": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 50], "geopanda": [2, 5, 6, 7, 10, 11, 12, 33, 34, 36, 37, 49, 50], "contain": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 26, 37, 50], "geometri": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 20, 21, 22, 23, 24, 26, 34, 36, 37, 39, 40, 41, 42, 43, 46, 48, 49, 50], "limit": [2, 11, 21, 51], "upper": [2, 11, 47], "valu": [2, 3, 6, 8, 9, 10, 11, 15, 16, 18, 22, 23, 33, 34, 36, 37, 40, 47, 50, 51], "legend": [2, 34, 36, 47, 50], "default": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 20, 21, 22, 23, 24, 27, 50], "size": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 20, 23], "polygon": [2, 5, 8, 9, 11, 13, 15, 20, 21, 22, 23, 24, 26, 34, 37, 39, 40, 41, 42, 43, 46, 48, 49, 50], "border": [2, 8, 9, 11], "option": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 20, 21, 23, 24, 29, 50], "figur": [2, 5, 6, 7, 8, 9, 10, 12, 15, 20], "return": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 26, 33, 34, 36, 49, 50], "type": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 37, 49, 50, 51], "none": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 21, 22, 24, 34, 37, 46, 50], "which": [2, 10, 11, 15, 21, 22, 23, 29, 51], "It": [2, 15, 29, 36, 37], "instanc": [2, 3, 4, 15, 36], "integ": [2, 45], "repres": [2, 3, 5, 7, 8, 9, 11, 13, 15, 16, 18, 20, 23, 50], "id": [2, 3, 15, 23, 36, 37, 39, 40, 41, 42, 43, 46, 48, 50], "specifi": [2, 8, 10, 11, 13, 15, 20, 21], "model_computed_field": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18], "classvar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18], "dict": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 23, 24], "str": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 20, 24, 37], "computedfieldinfo": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18], "dictionari": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 23, 24], "comput": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 20, 23, 29, 51], "field": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18], "name": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 34, 36, 37, 40, 50], "correspond": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18], "object": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 34, 37, 40, 50], "simul": [3, 23, 36, 51], "anneal": [3, 23, 36, 38, 44, 51], "optim": [3, 23, 35, 38, 44, 51], "servic": [3, 5, 7, 9, 11, 14, 15, 18, 27, 29, 37, 40, 51], "constrain": 3, "land": [3, 9, 13, 15, 16, 18, 21, 23, 24, 35, 38, 40, 50, 51], "variabl": [3, 4, 8, 11, 12, 13, 15, 16, 20, 22, 23, 24, 26, 36, 47, 50], "service_typ": [3, 11, 15, 36, 37, 40, 47, 50], "servicetyp": [3, 11, 15, 18, 37, 50], "brick": [3, 15, 18, 37, 50], "servicebrick": [3, 15, 18, 37, 50], "specif": [3, 15, 37], "where": [3, 11, 15], "characterist": [3, 8], "quantiti": 3, "properti": [3, 5, 8, 15, 20, 21], "capac": [3, 9, 11, 15, 18, 36, 37, 40, 47, 50], "total": [3, 11, 15, 18, 23, 47, 50], "area": [3, 5, 11, 13, 15, 16, 18, 20, 22, 23, 24, 26, 30, 34, 36, 37, 38, 40, 44, 50, 51], "occupi": [3, 15, 18], "to_dict": [3, 15, 18, 37, 50], "convert": [3, 15, 18, 23], "represent": [3, 15, 18], "whether": [3, 4, 15, 18, 20, 23, 50], "integr": [3, 15, 18, 38, 44, 51], "indic": [3, 5, 15, 18, 36, 37, 40, 50], "land_us": [3, 9, 15, 18, 23, 24, 34, 36, 37, 40, 46, 50], "landus": [3, 9, 15, 16, 18, 23, 24, 36, 37, 38, 40, 44, 50], "fsi": [3, 8, 15, 37, 48, 50], "gsi": [3, 15, 37, 50], "spatial": [3, 8, 11, 23, 26, 36, 50, 51], "being": [3, 11, 51], "evalu": [3, 11, 23, 51], "floor": [3, 8, 15], "space": [3, 8, 15], "index": [3, 7, 8, 15, 17, 22, 24, 29, 40, 45, 47, 50], "ground": [3, 15], "site_area": [3, 15, 37, 50], "get": [3, 8, 15, 34, 37, 38, 50], "site": [3, 15, 33, 34, 49], "footprint_area": [3, 15, 37, 50], "footprint": [3, 15], "build_floor_area": [3, 15, 37, 50], "buildabl": 3, "integrated_area": 3, "determin": [3, 6, 7, 10, 23, 36, 50], "non_integrated_area": 3, "non": [3, 13, 15, 29, 51], "living_area": [3, 15, 37, 50], "live": [3, 11, 15, 18], "residenti": [3, 13, 15, 16, 24, 34, 36, 37, 40, 46, 50], "popul": [3, 10, 11, 15, 18, 37, 40, 47, 50, 51], "estim": [3, 18, 50, 51], "demand": [3, 11, 18, 29, 37, 47, 50], "build": [3, 13, 15, 18, 22, 29, 34, 37, 40, 50, 51], "annealingoptim": [3, 36, 40, 50], "on_iter": [3, 36], "callabl": 3, "list": [3, 4, 8, 9, 13, 15, 18, 20, 22, 23, 24, 28, 36, 37, 40], "maxim": 3, "scenario": [3, 50, 51], "provis": [3, 36, 38, 40, 44, 51], "function": [3, 23, 26, 29, 36, 51], "certain": [3, 13, 26, 40, 44, 50], "callback": 3, "call": [3, 50], "after": [3, 15, 36, 50], "each": [3, 6, 7, 8, 9, 10, 11, 12, 21, 22, 23, 50], "iter": [3, 11, 23, 36, 50, 51], "current": [3, 11, 15, 23, 37], "number": [3, 8, 12, 15, 18, 22, 23, 50], "best": [3, 23, 29, 36, 40], "found": [3, 15, 21, 36], "so": [3, 29, 37, 40, 45, 51], "far": 3, "_check_constraint": 3, "x": [3, 20, 23, 29, 36, 37, 40, 50], "check": [3, 9, 15, 23, 29, 34, 49, 50], "solut": [3, 11, 51], "satisfi": [3, 23], "all": [3, 6, 9, 11, 15, 20, 22, 23, 29, 36, 49], "constraint": [3, 23], "fals": [3, 9, 11, 15, 18, 23, 36, 37, 40, 46, 49, 50], "otherwis": [3, 9, 15, 23, 36], "_perturb": [3, 23], "perturb": [3, 23], "modifi": [3, 23, 50], "randomli": [3, 23], "chosen": [3, 50], "_generate_initial_x": [3, 23], "blocks_lu": [3, 36, 40, 50], "weight": [3, 5, 8, 15, 20, 50], "_generate_ind": 3, "to_gdf": [3, 17, 23, 36, 40, 50], "result": [3, 11, 12, 23, 26, 36, 37, 39, 41, 42, 43, 46, 47, 48, 49, 50], "gpd": [3, 5, 8, 9, 10, 11, 12, 13, 15, 20, 21, 22, 23, 24, 26, 33, 34, 36, 37, 50], "to_bricks_df": [3, 36, 40, 50], "datafram": [3, 11, 15, 20, 23, 36, 47, 50], "about": [3, 18, 31, 37, 50, 51], "pd": [3, 11, 15, 20, 23, 36, 37, 47, 50], "_get_clear_df": [3, 50], "construct": [3, 34], "chang": [3, 11, 23, 29, 36], "treat": 3, "clear": [3, 15], "relat": [3, 15, 16, 23], "to_df": [3, 50], "blocks_fsi": [3, 36, 40, 50], "blocks_gsi": [3, 36, 40, 50], "t_max": [3, 23], "100": [3, 13, 23, 33, 34, 36, 37, 46, 50], "t_min": [3, 23], "001": [3, 23], "rate": [3, 23, 36, 40], "95": [3, 22, 33, 36, 40], "max_it": [3, 23, 36, 40], "1000": [3, 10, 18, 36, 40, 50], "execut": 3, "process": [3, 15, 24, 26, 36], "maximum": [3, 11, 13, 18, 23], "temperatur": [3, 23, 36], "minimum": [3, 11, 13, 15, 21, 23, 24, 26], "1e": [3, 23], "3": [3, 23, 24, 29, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48], "cool": [3, 23], "abc": [4, 15], "basemodel": [4, 15, 18], "implement": 4, "instanceof": 4, "displai": [4, 15, 23], "progress": [4, 23], "arg": [4, 15, 17, 20, 21, 22, 23, 24], "kwarg": [4, 17, 20, 21, 22, 23, 24, 34], "ani": [4, 9, 15, 24, 29, 37, 50], "main": [4, 14, 20, 51], "should": [4, 15, 50], "overridden": 4, "child": 4, "length": [4, 8, 13, 15, 36, 49], "argument": [4, 15], "arbitrari": 4, "keyword": 4, "rais": [4, 15, 22, 24], "notimplementederror": [4, 15], "If": [4, 8, 9, 11, 13, 15, 21, 22, 23, 24, 29, 37], "analyz": [5, 8, 13, 51], "distribut": [5, 7, 22, 50], "divers": [5, 38, 41, 44, 51], "point": [5, 15, 22, 36, 37], "interest": 5, "measur": [5, 23], "connect": [5, 10, 15, 20, 38, 44, 51], "variou": [5, 9, 11, 13, 15], "geometr": 5, "network": [5, 8, 15, 20, 33, 50, 51], "connectivity_weight": 5, "density_weight": 5, "diversity_weight": 5, "metric": [5, 8, 26, 51], "line": [5, 6, 7, 10, 12, 15, 33, 36], "width": [5, 6, 7, 10, 12, 15, 20, 21, 26], "densiti": [5, 10, 41], "median": [6, 11, 47, 50], "access": [6, 11, 15, 18, 19, 20, 37, 38, 44, 45, 47, 51], "matrix": [6, 15, 20, 38, 51], "row": [6, 33, 34, 36, 40, 50], "_shannon_index": 7, "services_seri": 7, "shannon": 7, "count": [7, 36, 37, 40, 50], "panda": [7, 11, 12, 36, 37, 47, 50], "seri": [7, 12, 17, 24], "differ": [7, 11, 15, 16, 26, 35, 49, 51], "within": [7, 10, 13, 15, 18, 21, 22, 23, 37, 51], "integrationtyp": [8, 45], "enum": [8, 11, 16, 24], "enumer": [8, 16], "local": [8, 21, 29, 50], "global": 8, "weighttyp": 8, "angular": 8, "angl": 8, "mm_len": 8, "graph": [8, 15, 20, 23, 36, 38, 51], "thi": [8, 10, 11, 13, 18, 29, 36, 37, 49, 50], "extend": [8, 13, 24], "includ": [8, 9, 11, 13, 15, 24, 50, 51], "cluster": [8, 12, 22, 45, 51], "nx": [8, 20, 23, 36], "road": [8, 13, 21, 34, 50], "validate_graph": 8, "valid": [8, 15, 18, 20, 22, 23, 24], "validate_model": [8, 15], "necessari": [8, 29, 32, 36, 51], "exist": [8, 13, 15, 22, 29, 37, 50, 51], "column": [8, 10, 11, 15, 21, 22, 24, 33, 34, 36, 37, 40, 45, 47, 50], "color": [8, 34, 37], "edg": [8, 15, 20, 36, 50], "_get_dual_graph": 8, "dual": 8, "intersect": [8, 15, 23, 24, 34, 37, 50], "relationship": [8, 15], "between": [8, 10, 11, 15, 20, 23, 34, 37, 50, 51], "integration_block": 8, "n_cluster": [8, 22], "4": [8, 13, 22, 33, 34, 36, 37, 39, 40, 41, 42, 43, 46, 48, 49], "perform": [8, 11, 26, 29, 44, 50, 51], "fsi_column": 8, "integration_column": 8, "form": [8, 21, 22], "addit": [8, 51], "label": [8, 23], "integration_typ": [8, 45], "weight_typ": 8, "local_radiu": 8, "5": [8, 13, 33, 34, 36, 37, 39, 40, 41, 43, 45, 49], "radiu": [8, 10], "landusepredict": [9, 46, 50], "predict": [9, 38, 44, 50, 51], "cosin": 9, "similar": [9, 50], "_get_land_uses_servic": 9, "retriev": [9, 15, 18, 50], "_get_blocks_gdf": [9, 11], "_get_unique_per_landus": 9, "landuse_item": 9, "find": [9, 23, 34, 36, 50, 51], "uniqu": [9, 15, 16, 18, 21, 50], "tag": [9, 21, 49, 50], "_intersect": 9, "set1": 9, "set2": 9, "two": [9, 15, 23, 37], "set": [9, 20, 23, 24, 34, 36, 47, 49, 50], "have": [9, 15, 20, 29, 36, 37, 50], "common": 9, "element": [9, 49, 51], "_predict_block_landuse_cosine_similar": 9, "block_vector": 9, "landuse_vector": 9, "return_prob": 9, "_predict_block_landus": 9, "codes_in_block": 9, "use_cos_similar": 9, "kei": [9, 11, 24, 37, 50], "boolean": 9, "presenc": 9, "code": [9, 15, 18, 24, 29, 37, 50], "categori": [9, 18], "np": 9, "arrai": 9, "first": [9, 15, 36, 37, 50], "collect": [9, 23], "second": [9, 15], "present": [9, 24, 31], "vector": 9, "probabl": 9, "made": 9, "unpredict": 9, "populationcentr": [10, 41], "visual": [10, 11, 12, 36, 37, 50], "central": [10, 38, 44, 51], "connectivity_radiu": 10, "consid": [10, 13, 51], "meter": [10, 15, 18], "ad": [10, 12, 15, 51], "degre": 10, "normal": 10, "combin": 10, "them": [10, 22, 29], "final": [10, 29, 36], "provisionmethod": [11, 47, 50], "greedi": [11, 50], "gravit": [11, 47], "linear": [11, 33, 51], "distanc": [11, 13, 15, 20, 37, 40, 45], "taken": 11, "account": [11, 50, 51], "squar": [11, 15, 18, 23], "linearli": 11, "healthcar": 11, "etc": [11, 14, 21, 51], "multipl": 11, "like": [11, 14, 21, 29, 36], "alloc": [11, 23], "program": 11, "transport": [11, 16, 20, 24, 34, 36, 37, 40, 50], "stat": [11, 47, 50], "basic": [11, 18, 50], "statist": [11, 47, 50], "mean": [11, 15, 22, 47, 50], "min": [11, 15, 37, 47, 50], "max": [11, 15, 36, 47, 50], "ratio": [11, 13, 15, 23, 36], "get_bound": [11, 47], "update_df": [11, 47, 50], "lower": [11, 47], "bound": [11, 20, 34, 47], "self_suppli": 11, "inch": 11, "updat": [11, 15, 23, 29, 50], "classmethod": [11, 15, 17, 20, 23], "divid": [11, 26], "sum": [11, 23, 34, 50], "met": 11, "demand_within": [11, 50], "overal": [11, 47], "_get_lower_bound": 11, "assum": 11, "meet": 11, "its": [11, 15, 18, 23, 50], "up": [11, 29, 34, 50], "_get_upper_bound": 11, "fulli": 11, "full": 11, "lower_bound": 11, "upper_bound": 11, "allow": [11, 15, 20, 22, 23, 26, 51], "own": [11, 37], "directli": 11, "demand_left": [11, 50], "capacity_left": [11, 50], "_lp_provis": [11, 47, 50], "selection_rang": 11, "lp": [11, 47, 50], "solver": 11, "loop": 11, "itself": 11, "till": 11, "left": 11, "rang": [11, 23], "defin": [11, 21, 50, 51], "actual": [11, 23, 50], "demand_without": [11, 50], "_greedy_provis": 11, "assign": [11, 12, 23], "closest": 11, "avail": [11, 15, 18, 37], "number_of_clust": 12, "11": [12, 36, 37, 40, 41, 47, 48, 50], "random_st": 12, "morphotyp": [12, 51], "kmean": 12, "random": [12, 40, 50], "state": [12, 15, 50], "reproduc": 12, "strelka": 12, "_get_strelka_morphotyp": 12, "attribut": [12, 15, 20, 24, 34], "_name_spacematrix_morphotyp": 12, "_get_spacematrix_morphotyp": 12, "identifi": [13, 15, 18, 20, 21, 36, 51], "vacant": [13, 38, 44, 51], "vacantarea": [13, 49], "area_to_length_min": 13, "area_min": 13, "area_to_mrr_area_min": 13, "path_buff": 13, "roads_buff": 13, "buildings_buff": 13, "blocks_buffer_min": 13, "20": [13, 33, 34, 36, 50], "blocks_buffer_max": 13, "40": [13, 26, 34, 40, 50], "geograph": 13, "featur": [13, 29], "natur": 13, "amen": 13, "filter": [13, 15, 17, 18, 21, 22, 34, 50], "shape": [13, 20, 22, 23, 24, 33, 34, 36], "proxim": [13, 23], "rotat": 13, "rectangl": 13, "mrr": 13, "buffer": [13, 23, 36], "around": 13, "path": [13, 15, 33, 34, 37, 50], "footwai": 13, "_dwn_other": 13, "download": 13, "standard": [13, 24], "geoseri": [13, 17], "_dwn_leisur": 13, "leisur": 13, "_dwn_landus": 13, "exclud": [13, 15, 34, 37, 50], "_dwn_amen": 13, "_dwn_build": 13, "appli": [13, 37, 50], "_dwn_natur": 13, "bai": 13, "_dwn_waterwai": 13, "waterwai": 13, "_dwn_highwai": 13, "highwai": 13, "_dwn_path": 13, "_dwn_railwai": 13, "railwai": [13, 21, 34, 50], "subwai": 13, "done": [13, 29], "whole": [13, 15], "describ": [14, 15, 29, 37], "entiti": [14, 18], "is_integr": [15, 18, 36, 37, 40, 50], "abstract": 15, "must": [15, 18, 21, 22, 23, 24, 29, 50], "greater": [15, 18], "than": [15, 18, 49, 50], "_get_min_brick": 15, "liter": 15, "statu": 15, "compar": 15, "either": 15, "against": 15, "_fill_capacity_and_area": 15, "fill": [15, 26, 34, 50], "blockservic": 15, "take": [15, 29, 50, 51], "some": [15, 25, 26, 31, 36, 37, 45, 50], "union": 15, "multipolygon": [15, 20, 21, 24, 50], "befor": 15, "make": [15, 29, 40, 49, 50, 51], "sure": [15, 29], "buildingservic": 15, "out": [15, 21, 51], "need": [15, 18, 50], "attach_geometri": 15, "self": 15, "attach": 15, "across": 15, "parent": 15, "insid": [15, 26, 50], "equal": [15, 18], "dedic": 15, "non_living_area": [15, 37, 50], "activ": [15, 29], "number_of_floor": [15, 37, 50], "storei": 15, "empti": [15, 18], "is_liv": [15, 37, 50], "update_servic": [15, 37, 50], "remov": [15, 20, 26, 37, 50], "validate_land_us": [15, 18], "transform": 15, "all_servic": 15, "those": 15, "thu": 15, "least": 15, "one": [15, 19, 23, 29, 50, 51], "living_demand": [15, 37, 50], "per": [15, 18], "person": 15, "mxi": [15, 37, 48, 50], "mix": 15, "l": [15, 37, 48, 50], "osr": [15, 37, 50], "open": [15, 30, 51], "share_liv": [15, 37, 50], "share": [15, 23, 24, 36], "business_area": [15, 37, 50], "busi": [15, 16, 24, 36, 37, 40, 50], "share_busi": [15, 37, 50], "zero": 15, "buildings_ind": 15, "territory_ind": 15, "services_ind": 15, "land_use_service_typ": [15, 37], "get_services_gdf": [15, 37], "get_buildings_gdf": [15, 37], "simplifi": [15, 37, 50], "update_build": [15, 37, 50], "from_gdf": 15, "follow": [15, 22, 24, 29, 36, 50, 51], "For": [15, 36], "more": [15, 50], "pleas": [15, 29], "__getitem__": 15, "building_id": [15, 37], "support": [15, 29, 51], "_": 15, "exampl": [15, 34, 35, 36, 44, 50, 51], "456": 15, "123": [15, 37, 39, 50], "block_id": [15, 21, 36, 37, 40, 49, 50], "keyerror": 15, "__hash__": [15, 18], "hash": [15, 18], "acc_mx": [15, 32, 33, 36, 37, 50], "cr": [15, 20, 21, 22, 24, 26, 34, 36, 37, 50], "pyproj": [15, 21, 26], "coordin": [15, 20, 22, 24, 34, 50], "refer": [15, 22, 24, 50], "system": [15, 22, 24, 34, 50, 51], "accessibility_matrix": [15, 50], "travel": [15, 50], "time": [15, 18, 40, 45, 50], "minut": [15, 18], "drive": 15, "walk": 15, "intermod": [15, 20, 38, 51], "anoth": 15, "_block": [15, 40, 45, 50], "_service_typ": 15, "15": [15, 33, 36, 37, 40, 41, 47, 48, 49, 50], "max_travel_tim": [15, 37], "get_land_use_service_typ": 15, "get_blocks_gdf": [15, 37, 40, 45, 50], "update_land_us": [15, 37, 50], "add_service_typ": [15, 37], "add": [15, 29, 37], "new": [15, 29, 37], "get_dist": [15, 37], "block_a": 15, "block_b": 15, "get_out_edg": 15, "outgo": 15, "get_in_edg": 15, "incom": 15, "epsg": [15, 34, 37, 50], "loaded_service_typ": 15, "load": [15, 36, 49, 50], "associ": [15, 18], "same": [15, 37], "match": [15, 18, 22, 24], "assertionerror": [15, 22, 24], "doe": 15, "do": [15, 20, 22, 24, 29], "nor": 15, "thei": [15, 22, 37], "method": [15, 34, 36, 38, 47, 51], "did": [15, 37, 50], "mai": [15, 18, 38], "buldingservic": 15, "pitch": [15, 36, 37, 40, 50], "playground": [15, 36, 40], "alreadi": [15, 29, 50], "request": 15, "service_type_nam": 15, "school": [15, 18, 36, 37, 40, 47, 50], "computer_club": 15, "__str__": [15, 18], "string": [15, 18, 24], "from_pickl": [15, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49], "file_path": 15, "pickl": [15, 33, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50], "file": [15, 29, 37, 49, 50], "to_pickl": [15, 33, 37, 50], "save": [15, 37, 50], "commerci": 16, "recreat": [16, 23, 24, 34, 36, 37, 40, 50], "special": [16, 24, 36], "purpos": 16, "industri": [16, 24, 36], "agricultur": [16, 24, 36, 46], "baseschema": [17, 20, 21, 22, 23, 24], "dataframemodel": 17, "idx": 17, "config": [17, 20, 21, 22, 23, 24], "strict": 17, "add_missing_column": 17, "check_geometri": 17, "parking_area": [18, 37, 50], "typic": 18, "peopl": [18, 50], "accommod": 18, "serv": [18, 37], "park": [18, 36, 37, 40], "averag": 18, "reach": 18, "get_brick": 18, "criteria": 18, "validate_brick": 18, "calculate_in_ne": 18, "help": [19, 26, 38, 47, 51], "split": [19, 22, 23, 34], "iduedu": [20, 33, 51], "wrapper": 20, "user": [20, 47, 51], "blocksschema": [20, 21, 22, 23, 24], "schema": [20, 22, 23, 24, 34, 50], "handl": 20, "geospati": 20, "_geom_typ": [20, 22, 23, 24], "accessibilityprocessor": [20, 33, 36, 50], "processor": 20, "convex": 20, "hull": 20, "enclos": 20, "iduedu_cr": 20, "2": [20, 24, 29, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48], "networkx": [20, 23, 36], "height": 20, "_get_broken_nod": 20, "broken": 20, "node": [20, 36, 50], "y": [20, 36], "_get_island_nod": 20, "island": 20, "stai": 20, "_fix_graph": 20, "inplac": 20, "get_intermodal_graph": [20, 33, 50], "clip_by_bound": 20, "keep_routes_geom": 20, "clip": 20, "keep": [20, 29], "rout": [20, 50], "get_accessibility_matrix": [20, 33, 36, 50], "time_min": [20, 36, 50], "e": [20, 34, 51], "g": [20, 51], "parcel": 21, "boundari": [21, 34, 50], "water": [21, 34, 50], "boundariesschema": 21, "roadsschema": 21, "railwaysschema": 21, "waterschema": 21, "blocksgener": [21, 50], "obtain": [21, 37, 50, 51], "via": [21, 29, 37], "osmnx": [21, 50], "linestr": [21, 36], "By": 21, "osm": [21, 34, 50], "rail": 21, "riverbank": 21, "pond": 21, "run": [21, 22, 23, 24, 29, 34, 36, 50], "min_block_width": 21, "local_cr": [21, 34, 50], "bodi": 21, "small": [21, 26, 36], "bottleneck": 21, "_get_enclosur": 21, "barrier": 21, "enclosur": [21, 34, 50], "_reindex_block": 21, "reindex": 21, "ensur": 21, "ha": [21, 29, 49], "buildingsschema": 22, "blockssplitt": 22, "points_quantil": 22, "98": 22, "area_quantil": 22, "quantil": 22, "_drop_index_column": 22, "drop": [22, 26, 34, 36, 49, 50], "_split_block": 22, "smaller": [22, 23, 36, 40], "region": 22, "voronoi": 22, "diagram": 22, "k": 22, "landuseoptim": [23, 36], "tqdm": [23, 37], "_split_polygon": 23, "geometrycollect": 23, "part": [23, 51], "cut": [23, 36], "along": 23, "midpoint": 23, "oper": [23, 26, 34, 44], "_is_block_larg": 23, "block_geometri": 23, "too": 23, "larg": 23, "aspect": [23, 36], "exce": 23, "_split_large_block": 23, "blocks_gdf": [23, 32, 36, 37], "accord": [23, 29, 36], "predefin": [23, 24, 40], "rule": [23, 36], "ones": 23, "_get_adjacency_graph": 23, "adjac": [23, 36], "detect": 23, "buffer_min": 23, "configur": 23, "_check_adj_rul": 23, "_check_area_rang": 23, "fall": 23, "_check_ratio_rang": 23, "to_shares_dict": [23, 36], "_object": 23, "lu_shar": [23, 36], "deviat": 23, "target": 23, "99": [23, 34, 50], "10000": [23, 40], "algorithm": [23, 51], "classifi": 24, "zone": [24, 34, 36], "zonesschema": 24, "pandera": 24, "enforc": 24, "processedblocksschema": 24, "nullabl": 24, "landuseprocessor": 24, "zone_to_land_us": 24, "\u04421\u04361": 24, "\u04421\u04362": 24, "\u04422\u04361": 24, "\u04422\u0436\u04342": 24, "\u04423\u04361": [24, 34], "\u04423\u04362": 24, "\u04423\u0436\u04343": 24, "\u0442\u04341": 24, "\u0442\u04342": 24, "\u0442\u04343": 24, "\u0442\u04381": 24, "\u0442\u04382": 24, "\u0442\u04383": [24, 34], "\u0442\u04384": 24, "\u0442\u043a1": 24, "\u0442\u043a2": 24, "\u0442\u043a3": 24, "\u0442\u043f1": 24, "\u0442\u043f2": 24, "\u0442\u043f3": 24, "\u0442\u043f4": 24, "\u0442\u043f\u04341": 24, "\u0442\u043f\u04342": 24, "\u0442\u04400": 24, "\u0442\u04401": 24, "\u0442\u04402": [24, 34], "\u0442\u04403": 24, "\u0442\u04404": [24, 34], "\u0442\u04405": 24, "\u0442\u04411": 24, "\u0442\u04412": 24, "\u0442\u0443": 24, "default_zone_to_land_us": 24, "min_intersect": 24, "threshold": 24, "cover": 24, "df_with_attribut": 24, "record": [24, 29], "df": [24, 36, 50], "classif": 24, "utili": 25, "fill_hol": 26, "hole": [26, 34, 50], "drop_contained_geometri": 26, "other": [26, 33, 36, 50], "without": 26, "filter_bottleneck": 26, "projected_cr": 26, "min_width": 26, "narrow": 26, "place": [26, 50], "get_polygon_aspect_ratio": 26, "below": [28, 31, 38], "we": [29, 36, 37, 40, 45, 50], "bug": 29, "enhanc": 29, "work": [29, 40, 51], "idea": 29, "extens": 29, "discuss": 29, "familiar": 29, "yourself": 29, "layout": [29, 36], "major": 29, "To": [29, 50], "start": [29, 32], "librari": [29, 30, 32, 33, 38, 50, 51], "action": 29, "clone": 29, "repositori": 29, "git": 29, "http": 29, "github": 29, "com": 29, "aimclub": 29, "creat": [29, 50, 51], "virtual": 29, "environ": 29, "exact": [29, 50], "packag": [29, 33, 34, 49], "version": 29, "venv": [29, 33, 34, 49], "bin": 29, "instal": 29, "edit": 29, "mode": 29, "depend": 29, "dev": 29, "pre": 29, "commit": 29, "hook": 29, "branch": 29, "checkout": 29, "b": [29, 34], "new_branch_nam": 29, "newli": 29, "rememb": 29, "never": 29, "copi": [29, 36, 47], "control": 29, "test": [29, 50], "command": 29, "pass": [29, 50], "readm": 29, "when": 29, "re": [29, 37, 45], "modified_fil": 29, "push": 29, "u": [29, 36, 51], "origin": 29, "my": 29, "go": 29, "web": 29, "page": 29, "fork": 29, "repo": 29, "click": 29, "pr": 29, "send": 29, "review": 29, "look": 29, "confus": 29, "through": 29, "checklist": 29, "everyth": [29, 50], "effici": 29, "accept": 29, "wai": [29, 50], "reflect": 29, "anyth": 29, "involv": 29, "properli": 29, "comment": 29, "docstr": 29, "explain": 29, "rational": 29, "behind": 29, "obviou": 29, "practic": 29, "doubl": 29, "easi": [29, 51], "pip": [29, 32], "anaconda": 29, "python": 29, "complic": 29, "most": 29, "won": 29, "merg": 29, "becaus": [29, 37], "want": 29, "care": 29, "sphinx": 29, "autodoc": 29, "automodul": 29, "module_nam": 29, "sever": 29, "script": 29, "doc": 29, "your_name_for_fil": 29, "rst": 29, "header": 29, "underlin": 29, "sign": 29, "crucial": 29, "toctre": 29, "api": [29, 51], "choos": [29, 34], "appropri": 29, "repeat": 29, "d": 29, "step": 29, "previou": [29, 50], "Be": 29, "happi": 29, "travi": 29, "ci": 29, "automat": 29, "qualiti": 29, "coverag": 29, "back": 29, "shortli": 29, "come": 29, "red": [29, 37], "address": 29, "error": [29, 49], "guid": [29, 32], "well": [29, 51], "written": 29, "tpot": 29, "framework": 29, "frequent": 30, "ask": 30, "question": 30, "answer": 30, "import": [31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50], "quickstart": [31, 51], "contribut": [31, 51], "faq": [31, 51], "quick": 32, "next": [32, 34], "o": [33, 34, 37, 50], "data_path": [33, 34, 50], "read_parquet": [33, 34, 37, 50], "join": [33, 34, 37, 50], "parquet": [33, 34, 37, 50], "ap": [33, 36, 50], "home": [33, 34, 49], "vasilstar": [33, 34, 49], "masterplan": [33, 34, 49], "lib": [33, 34, 49], "python3": [33, 34, 49], "py": [33, 34, 49], "90": 33, "runtimewarn": [33, 34], "invalid": [33, 34], "encount": [33, 34, 49], "line_locate_point": 33, "head": [33, 34, 37, 39, 40, 41, 42, 43, 46, 48, 49, 50], "6": [33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50], "7": [33, 36, 37, 39, 41, 46, 47, 50], "8": [33, 36, 37, 41, 46, 47, 50], "9": [33, 36, 37, 39, 41, 46, 47, 48, 50], "16310": 33, "16311": 33, "16312": 33, "16313": 33, "16314": 33, "16315": [33, 34], "16316": [33, 34], "16317": [33, 34], "16318": [33, 34], "16319": [33, 34], "000000": [33, 41, 43, 50], "18": [33, 34, 37, 40, 50], "718750": [33, 50], "234375": [33, 50], "17": [33, 36, 40, 47, 50], "21875": [33, 50], "30": [33, 34, 37, 41, 47, 50], "296875": [33, 50], "27": [33, 50], "390625": 33, "671875": [33, 50], "23": [33, 37, 40, 50], "281250": [33, 50], "78": [33, 42, 50], "6875": [33, 42], "81": [33, 41, 42], "2500": 33, "76": 33, "5625": [33, 42], "102": 33, "97": 33, "5000": [33, 50], "132": 33, "250": [33, 34, 37, 50], "130": 33, "8750": 33, "142": [33, 34, 37, 39, 41, 42, 43, 46, 48], "125": [33, 34, 40], "247": 33, "625": 33, "228": [33, 50], "124": [33, 34, 50], "6250": [33, 42], "859375": 33, "19": [33, 36, 37, 47, 50], "015625": 33, "65625": [33, 50], "25": [33, 37, 47, 50], "250000": 33, "765625": 33, "79": [33, 40], "4375": [33, 50], "74": 33, "7500": 33, "500": 33, "129": [33, 47], "0000": [33, 42], "140": 33, "245": [33, 50], "875": 33, "226": 33, "112": 33, "796875": 33, "968750": [33, 50], "062500": [33, 50], "28": [33, 34, 40, 50], "343750": [33, 50], "953125": 33, "71": [33, 37], "69": [33, 37, 40], "8125": [33, 50], "0625": [33, 50], "135": 33, "375": 33, "240": 33, "221": [33, 37, 50], "937500": [33, 50], "449219": 33, "421875": 33, "00000": [33, 50], "21": [33, 36, 37, 50], "109375": 33, "24": [33, 34, 40, 46, 47, 50], "984375": 33, "781250": [33, 50], "16": [33, 34, 36, 37, 40, 49, 50], "593750": [33, 50], "3125": [33, 42], "1250": [33, 37], "1875": 33, "128": [33, 50], "139": 33, "750": 33, "113": 33, "3750": 33, "31": [33, 37, 50], "906250": 33, "734375": 33, "28125": [33, 50], "125000": [33, 50], "429688": 33, "89": [33, 36], "92": [33, 50], "87": [33, 37, 50], "108": 33, "143": 33, "141": 33, "153": [33, 36], "000": 33, "258": 33, "239": 33, "16320": [33, 34, 37, 46], "estimate_utm_cr": [34, 50], "to_cr": [34, 37, 50], "lt": [34, 36, 37, 40, 46, 50], "32636": [34, 37], "gt": [34, 36, 37, 50], "wg": 34, "84": [34, 40, 42], "utm": 34, "36n": 34, "axi": [34, 37, 50], "info": [34, 37, 47, 50], "cartesian": 34, "east": 34, "metr": 34, "n": 34, "north": 34, "36": [34, 37, 50], "northern": 34, "hemispher": 34, "equat": 34, "onshor": 34, "offshor": 34, "belaru": 34, "cypru": 34, "egypt": 34, "ethiopia": 34, "finland": 34, "israel": 34, "jordan": 34, "kenya": 34, "lebanon": 34, "moldova": 34, "norwai": 34, "russian": 34, "feder": 34, "saudi": 34, "arabia": 34, "sudan": 34, "syria": 34, "t\u00fcrkiy": 34, "turkei": 34, "uganda": 34, "ukrain": 34, "transvers": 34, "mercat": 34, "datum": 34, "world": 34, "geodet": 34, "1984": 34, "ensembl": 34, "ellipsoid": 34, "prime": 34, "meridian": 34, "greenwich": 34, "bg": [34, 50], "2024": [34, 37, 47, 50], "09": [34, 37, 40, 47, 50], "22": [34, 37, 40, 46, 47, 50], "01": [34, 37, 47, 50], "51": [34, 36, 39, 40, 50], "739": 34, "preprocess": [34, 36, 37, 50, 51], "blocks_gener": [34, 50], "__init__": [34, 50], "754": 34, "103": [34, 50], "775": 34, "109": [34, 50], "782": 34, "115": [34, 50], "794": 34, "58": [34, 37, 39, 40, 41, 50], "905": 34, "161": [34, 50], "984": [34, 37], "170": [34, 50], "02": [34, 36, 37, 40, 47, 50], "04": [34, 37, 50], "523": 34, "174": [34, 50], "05": [34, 36, 37, 47, 50], "595": 34, "178": [34, 50], "overlap": [34, 50], "07": [34, 40], "691": 34, "192": [34, 37, 50], "821": [34, 37], "199": [34, 50], "355560": 34, "390": 34, "6648337": 34, "904": 34, "355563": 34, "648": 34, "355572": 34, "149": [34, 37, 39, 41, 42, 43, 46, 48], "6648335": 34, "572": 34, "355567": 34, "560": 34, "355583": 34, "354": [34, 50], "355923": 34, "6648257": 34, "264": [34, 50], "355912": 34, "941": [34, 37], "355930": 34, "255": [34, 47], "set_axis_off": [34, 36, 37, 40, 45, 47, 50], "representative_point": [34, 36, 37], "37": [34, 37, 50], "13": [34, 40, 50], "49": [34, 50], "761": 34, "blocks_splitt": 34, "164": 34, "duplic": 34, "29": [34, 40, 50], "980": 34, "173": 34, "393": 34, "182": 34, "33": [34, 37, 50], "83": [34, 36], "00": [34, 36, 37, 46, 50], "41": [34, 37, 40, 50], "66it": 34, "963": 34, "voronoi_polygon": 34, "toler": 34, "extend_to": 34, "only_edg": 34, "48": [34, 37, 50], "87it": [34, 46], "50": [34, 37, 50], "55": [34, 39, 50], "75it": 34, "127": 34, "00it": 34, "44": [34, 37, 47, 50], "39it": 34, "354918": [34, 37, 39, 41, 42, 43, 46, 48], "622": [34, 37, 39, 41, 42, 43, 46, 48], "6625258": [34, 37, 39, 41, 42, 43, 46, 48], "829": [34, 37, 39, 41, 42, 43, 46, 48], "354901": [34, 37, 39, 41, 42, 43, 46, 48], "464": [34, 37, 39, 40, 41, 42, 43, 46, 48], "355412": [34, 37, 39, 41, 42, 43, 46, 48], "6623378": [34, 37, 39, 41, 42, 43, 46, 48], "355411": [34, 37, 39, 41, 42, 43, 46, 48], "700": [34, 37, 39, 41, 42, 43, 46, 48, 50], "353934": [34, 37, 39, 41, 42, 43, 46, 48], "329": [34, 37, 39, 41, 42, 43, 46, 48], "6625429": [34, 37, 39, 41, 42, 43, 46, 48], "433": [34, 37, 39, 41, 42, 43, 46, 48], "353923": [34, 37, 39, 41, 42, 43, 46, 48], "453": [34, 37, 39, 41, 42, 43, 46, 48], "355099": [34, 37, 39, 41, 42, 43, 46, 48], "099": [34, 37, 39, 41, 42, 43, 46, 48], "6623847": [34, 37, 39, 41, 42, 43, 46, 48], "765": [34, 37, 39, 41, 42, 43, 46, 48], "355074": [34, 37, 39, 41, 42, 43, 46, 48], "808": [34, 37, 39, 41, 42, 43, 46, 48], "352766": [34, 37, 39, 41, 42, 43, 46, 48], "168": [34, 37, 39, 41, 42, 43, 46, 48], "6621954": [34, 37, 39, 41, 42, 43, 46, 48], "748": [34, 37, 39, 41, 42, 43, 46, 48], "352744": [34, 37, 39, 41, 42, 43, 46, 48], "412": [34, 37, 39, 41, 42, 43, 46, 48], "335210": 34, "252": 34, "6655823": 34, "328": 34, "335105": 34, "217": 34, "315582": 34, "435": 34, "6679561": 34, "357": 34, "315523": 34, "467": 34, "316419": 34, "909": [34, 50], "6679189": 34, "653": 34, "316319": 34, "749": 34, "315709": 34, "232": [34, 47], "6679519": 34, "841": [34, 50], "315748": 34, "877": [34, 50], "335817": 34, "591": 34, "6619414": 34, "920": 34, "335727": 34, "256": 34, "38": [34, 36, 37, 47, 50], "52": [34, 37, 50], "lup": [34, 46, 50], "53": [34, 37, 50], "56": [34, 50], "345": 34, "land_use_proccessor": 34, "183": 34, "overlai": [34, 49], "06": [34, 37, 50], "119": 34, "196": 34, "176": 34, "208": [34, 50], "54": [34, 50], "nan": [34, 37, 41, 43, 50], "ax": [34, 36, 37], "ddd": [34, 37], "to_parquet": 34, "how": [35, 36, 44], "There": 36, "rel": [36, 50], "task": [36, 51], "possibl": [36, 47, 50, 51], "composit": 36, "read_fil": 36, "geojson": [36, 50], "explod": 36, "reset_index": 36, "fit": 36, "luo": 36, "desir": 36, "try": [36, 37, 50], "mse": 36, "best_x": 36, "best_valu": 36, "closer": 36, "wa": [36, 51], "dure": 36, "vari": 36, "999": 36, "100_000": 36, "004": 36, "20255": 36, "100000": [36, 47], "08": [36, 37], "88it": 36, "flow": 36, "see": [36, 50], "matplotlib": 36, "pyplot": 36, "plt": 36, "line2d": 36, "0x7f4a015973a0": 36, "As": [36, 50], "successfulli": 36, "kind": [36, 37], "close": 36, "could": 36, "adjust": 36, "001998457049778621": 36, "39": [36, 37, 40, 41, 47, 50], "26136152081823005": 36, "2084201382217867": 36, "19428657048692446": 36, "055519879096642556": 36, "06251407231282412": 36, "10371699128343877": 36, "11418082778015352": 36, "let": [36, 50], "proport": 36, "lu": [36, 40], "item": [36, 37, 40], "stack": 36, "mostli": 36, "peripheri": 36, "speed": 36, "adjacency_graph": 36, "to_epsg": 36, "loc": 36, "point_u": 36, "point_v": 36, "line_str": 36, "annealing_optim": [36, 40], "lu_fsi": [36, 40], "lu_gsi": [36, 40], "b_id": [36, 40], "len": [36, 40], "def": 36, "append": 36, "ao": [36, 40, 50], "431": 36, "599": 36, "73it": 36, "0x7f49fbf4ee90": 36, "3019165135206091": 36, "kindergarten": [36, 40, 50], "1721170395869191": 36, "hospit": [36, 40, 50], "polyclin": [36, 40, 50], "5546623794212219": 36, "23357664233576642": 36, "swimming_pool": [36, 37, 40, 50], "7822685788787483": 36, "stadium": [36, 37, 40, 50], "theatr": [36, 37, 40, 50], "museum": [36, 37, 40, 50], "cinema": [36, 37, 40], "mall": [36, 40], "conveni": [36, 40], "03501196242049367": 36, "supermarket": [36, 40], "011672970070504739": 36, "cemeteri": [36, 40], "religion": [36, 40], "market": [36, 40], "35456336178594877": 36, "bowling_allei": [36, 37, 40], "8038585209003215": 36, "22448979591836735": 36, "pharmaci": [36, 40], "17445917655268667": 36, "fuel": [36, 37, 40], "03177629488401652": 36, "beach": [36, 37, 40], "1639881928501148": 36, "train_build": [36, 37, 40], "bank": [36, 40], "5238344683080147": 36, "lawyer": [36, 40], "cafe": [36, 40], "20553691275167785": 36, "subway_entr": [36, 37, 40], "9333916939159093": 36, "multifunctional_cent": [36, 37, 40], "014418496871701126": 36, "hairdress": [36, 40], "2502606882168926": 36, "restaur": [36, 40], "16853932584269662": 36, "bar": [36, 40], "13003355704697986": 36, "govern": [36, 40], "recruit": [36, 40], "6420097697138869": 36, "hotel": [36, 37, 40], "zoo": [36, 40], "circu": [36, 37, 40], "post": [36, 37, 40], "004503997297601621": 36, "polic": [36, 37, 40], "7676348547717843": 36, "dog_park": [36, 37, 40], "2627722772277228": 36, "hostel": [36, 37, 40], "6952491309385863": 36, "bakeri": [36, 40], "651890482398957": 36, "0013895450629463914": 36, "guest_hous": [36, 37, 40], "05213764337851929": 36, "reserv": [36, 37, 40], "sanatorium": [36, 37, 40], "embank": [36, 37, 40], "machin": [36, 40, 51], "building_pl": [36, 40], "breweri": [36, 40], "6016597510373444": 36, "woodworking_pl": [36, 40], "oil_refineri": [36, 40], "plant_of_building_materi": [36, 40], "20855057351407716": 36, "wastewater_pl": [36, 37, 40], "02247925777577962": 36, "water_work": [36, 37, 40], "substat": [36, 37, 40], "010144642974016625": 36, "train_stat": [36, 37, 40], "1361969617600838": 36, "bus_stat": [36, 37, 40, 50], "08192129953787985": 36, "bus_stop": [36, 37, 40, 50], "005238344683080147": 36, "pier": [36, 37, 40, 50], "3112033195020747": 36, "animal_shelt": [36, 40, 50], "military_kom": [36, 40, 50], "9803921568627451": 36, "prison": [36, 40, 50], "landfil": [36, 40, 50], "plant_nurseri": [36, 40, 50], "greenhouse_complex": [36, 40, 50], "warehous": [36, 40, 50], "approxim": 36, "1300": [36, 40], "1259": 36, "320": [36, 50], "200": [36, 37, 50], "1271": 36, "1283": 36, "4000": [36, 37, 40, 50], "1317": 36, "35000": 36, "70": 36, "8737": 36, "82": [36, 37, 40], "85": 36, "8769": 36, "21000": 36, "8792": 36, "800": [36, 40, 47], "8819": 36, "8934": 36, "3100": 36, "218": 36, "example_data_path": 37, "your": 37, "read_pickl": 37, "print": [37, 40, 50], "66": [37, 50], "platform": 37, "renam": 37, "population_balanc": 37, "building_area": 37, "fillna": 37, "lambda": [37, 50], "storeys_count": 37, "els": [37, 50], "bad_build": 37, "1237": [37, 50], "257": 37, "1241": [37, 50], "054": 37, "warn": [37, 50], "1253": [37, 50], "1721": 37, "6109": 37, "313": [37, 50], "11it": 37, "edgecolor": 37, "14": [37, 40, 47, 49, 50], "services_gdf": 37, "f": 37, "except": 37, "continu": 37, "c": 37, "don": [37, 50], "later": 37, "346460": 37, "223": 37, "6649125": 37, "497": 37, "346465": 37, "461": 37, "6649128": 37, "462": 37, "664912": 37, "mixed_us": 37, "0x7f12698ac670": 37, "32": [37, 50], "isinst": 37, "round": [37, 40], "324": 37, "353918": 37, "105": 37, "662542": 37, "1173": 37, "352": 37, "363005": 37, "1163": 37, "308": 37, "capacity_fuel": 37, "501": 37, "available_service_typ": 37, "st": [37, 40], "34": [37, 40, 50], "120": [37, 50], "3200": [37, 50], "300": [37, 40, 50], "600": [37, 50], "8200": [37, 50], "1100": [37, 50], "13000": [37, 50], "2200": [37, 50], "3600": [37, 50], "7100": [37, 50], "35": [37, 50], "internet_caf": 37, "43840": 37, "686518": 37, "641057": 37, "30688": 37, "480678": 37, "199357": 37, "13152": 37, "205840": 37, "942581": 37, "044667e": 37, "606": [37, 47], "13953": 37, "390266": 37, "054497": [37, 48], "017345": 37, "141938": [37, 48], "031500": 37, "700000": [37, 48], "10294": 37, "395525": 37, "114392": 37, "2177": 37, "690063": 37, "431105": 37, "8116": 37, "705462": 37, "606820": 37, "317313e": 37, "5051": 37, "410558": 37, "444238": [37, 48], "217986": 37, "037925": [37, 48], "760348": 37, "211541": [37, 48], "871643": 37, "693582": 37, "710142": 37, "706252": 37, "161501": 37, "302679": 37, "630058e": 37, "480697": 37, "003234": [37, 48], "003205": 37, "008931": [37, 48], "246934": 37, "46303": 37, "954706": 37, "660044": 37, "30595": 37, "485797": 37, "760046": 37, "15708": 37, "468909": 37, "417075": 37, "964145e": 37, "581": 37, "11085": 37, "135352": 37, "235746": [37, 48], "056437": 37, "177121": [37, 48], "002452": 37, "660753": [37, 48], "153749": 37, "574111": 37, "097680": 37, "106407": 37, "750936": 37, "352959": 37, "47341": 37, "823175": 37, "046854": 37, "781752e": 37, "2004": 37, "45222": 37, "959595": 37, "086291": [37, 48], "025381": 37, "399812": [37, 48], "294526": 37, "692085": [37, 48], "buildings_gdf": 37, "158414": 37, "354964": 37, "060": 37, "6625185": 37, "771": 37, "354959": 37, "684": 37, "030958": 37, "035234": 37, "524664": 37, "510571": 37, "150194": 37, "355008": 37, "167": 37, "6625301": 37, "355012": 37, "344": 37, "185639": 37, "191954": 37, "534368": 37, "657586": 37, "58769": 37, "354878": 37, "6625544": 37, "327": 37, "354882": 37, "264070": 37, "272943": 37, "891060": 37, "381884": 37, "158321": 37, "355037": 37, "286": 37, "6624978": 37, "295": 37, "355060": 37, "347": 37, "158": 37, "324760": 37, "369888": 37, "110": [37, 50], "858925": 37, "47": [37, 40, 50], "510963": 37, "36319": 37, "354643": 37, "688": 37, "6625735": 37, "942": 37, "354657": 37, "709820": 37, "764221": 37, "134": 37, "934952": 37, "57": [37, 39, 50], "829269": 37, "353603": 37, "237": [37, 50], "6625736": 37, "175": 37, "77507": 37, "80": [37, 41, 50], "355093": 37, "541": 37, "6624021": 37, "861": 37, "75": [37, 50], "8000": [37, 40], "355171": 37, "604": 37, "6624273": 37, "791": 37, "158369": 37, "261": 37, "353025": 37, "189": 37, "6622629": 37, "138": 37, "165": [37, 47], "353416": 37, "159": 37, "6622235": 37, "pipelin": [38, 51], "layer": [38, 51], "spacematrix": [38, 44, 51], "case": [38, 51], "accessibility_to": [39, 50], "accessibility_from": [39, 50], "59": [39, 47, 50], "61": [39, 41], "consum": [40, 45], "nearest_block": [40, 45], "sjoin_nearest": [40, 45], "1445": [40, 45], "distance_col": [40, 45], "choic": [40, 50], "10_000": 40, "1065": 40, "46": [40, 50], "40it": 40, "46475854673870937": 40, "68": 40, "88": 40, "45": [40, 47, 50], "03": [40, 50], "65": [40, 50], "26": [40, 50], "1400": [40, 50], "150": [40, 50], "4750": 40, "190": 40, "6000": 40, "96": 40, "1472": 40, "352493": 40, "392": 40, "6644174": 40, "577": 40, "352480": 40, "316": 40, "352846": 40, "893": 40, "6643739": 40, "658": 40, "352854": 40, "917": [40, 50], "352713": 40, "398": 40, "6643353": 40, "609": 40, "352656": 40, "42": [40, 47, 50], "352661": 40, "968": 40, "6643879": 40, "720": 40, "352637": 40, "303": 40, "43": [40, 50], "353921": 40, "529": [40, 50], "6644728": 40, "862": 40, "353829": 40, "106": 40, "64": 41, "000003": 41, "036894": 41, "63": [41, 50], "000010": 41, "693147": [41, 43], "211642": 41, "000001": 41, "212659": 41, "population_centr": 41, "93": 42, "analyt": 44, "demonstr": 45, "mask": 45, "3000": 45, "663": 46, "45it": 46, "725": 46, "282": 47, "312": 47, "4591x565": 47, "066": 47, "346": [47, 50], "405": 47, "350": 47, "restor": [47, 50], "908": 47, "1822x16": 47, "181": 47, "1667x3": 47, "317": 47, "340": 47, "403": 47, "success": [47, 50], "269": [47, 50], "finish": [47, 50], "3506": [47, 49], "from_dict": [47, 50], "upd_result": 47, "244": 47, "1840x9": 47, "924": 47, "956": 47, "019": 47, "1713x3": 47, "075": 47, "097": 47, "delta_result": 47, "vmin": 47, "cmap": [47, 50], "puor": 47, "understand": 47, "6228538098164098": 47, "686326031371392": 47, "3889247430791169": 47, "6996023258100998": 47, "strelka_morphotyp": 48, "spacematrix_clust": 48, "spacematrix_morphotyp": 48, "\u0434\u0440\u0443\u0433\u043e\u0435": 48, "\u043c\u0430\u043b\u043e\u044d\u0442\u0430\u0436\u043d\u044b\u0439": 48, "\u043d\u0438\u0437\u043a\u043e\u043f\u043b\u043e\u0442\u043d\u044b\u0439": 48, "\u0436\u0438\u043b\u043e\u0439": 48, "\u043c\u0430\u043b\u043e\u044d\u0442\u0430\u0436\u043d\u0430\u044f": 48, "\u043c\u043e\u0434\u0435\u043b\u044c": 48, "\u0437\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438": 48, "\u0441\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0439": 48, "\u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u0430\u044f": 48, "\u0436\u0438\u043b\u0430\u044f": 48, "\u0437\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430": 48, "\u0441\u0440\u0435\u0434\u043d\u0435\u044d\u0442\u0430\u0436\u043d\u0430\u044f": 48, "\u0441\u0440\u0435\u0434\u043d\u0435\u044d\u0442\u0430\u0436\u043d\u044b\u0439": 48, "12": [48, 50], "va": 49, "No": 49, "server": 49, "respons": 49, "log": 49, "queri": 49, "2452": 49, "userwarn": 49, "keep_geom_typ": 49, "136": 49, "df1": 49, "retain": 49, "mrr_area": 49, "area_to_length": 49, "area_to_mrr_area": 49, "345743": 49, "868": 49, "6648301": 49, "559": 49, "925": 49, "921": 49, "892872": 49, "998": 49, "893658": 49, "157": 49, "558109": 49, "851129": 49, "922914": 49, "345905": 49, "852": [49, 50], "6647864": 49, "377": [49, 50], "952": 49, "840": 49, "567641": 49, "1350": [49, 50], "491811": 49, "205": 49, "377513": 49, "092793": 49, "622416": 49, "explor": 49, "notebook": 49, "trust": 49, "format": 50, "32637": 50, "read": 50, "One": 50, "themselv": 50, "descript": 50, "reproject": 50, "Then": 50, "880": 50, "922": 50, "931": 50, "939": 50, "988": 50, "003": 50, "166": 50, "231": 50, "359": 50, "371": 50, "550762": 50, "290": 50, "6565038": 50, "844": 50, "550768": 50, "857": 50, "6565033": 50, "563": 50, "544937": 50, "479": 50, "6564706": 50, "592": 50, "544935": 50, "619": 50, "544806": 50, "647": 50, "6565359": 50, "291": 50, "544814": 50, "358": 50, "544793": 50, "6565395": 50, "544800": 50, "732": 50, "550330": 50, "064": 50, "6563176": 50, "550349": 50, "733": 50, "546106": 50, "838": 50, "6566506": 50, "429": 50, "546183": 50, "774": 50, "734": 50, "552977": 50, "299": 50, "6562202": 50, "373": 50, "553051": 50, "882": 50, "735": 50, "556605": 50, "6559581": 50, "667": 50, "555984": 50, "050": 50, "736": 50, "552990": 50, "6562231": 50, "172": 50, "552917": 50, "365": 50, "737": 50, "to_fil": 50, "At": 50, "stage": 50, "intermodal_graph": 50, "vizual": 50, "ox": 50, "graph_to_gdf": 50, "graph_nod": 50, "length_met": 50, "graph_edg": 50, "now": 50, "acquir": 50, "shortest": 50, "pair": 50, "output": 50, "cell": 50, "j": 50, "doesn": 50, "traffic": 50, "727": 50, "728": 50, "729": 50, "730": 50, "731": 50, "195312": 50, "90625": 50, "453125": 50, "15625": 50, "437500": 50, "218750": 50, "328125": 50, "171875": 50, "398438": 50, "71875": 50, "43750": 50, "68750": 50, "609375": 50, "675781": 50, "53125": 50, "406250": 50, "78125": 50, "093750": 50, "843750": 50, "750000": 50, "62500": 50, "515625": 50, "007812": 50, "56250": 50, "96875": 50, "09375": 50, "500000": 50, "156250": 50, "12500": 50, "812500": 50, "62": 50, "46875": 50, "93750": 50, "875000": 50, "687500": 50, "187500": 50, "324219": 50, "902344": 50, "359375": 50, "242188": 50, "34375": 50, "031250": 50, "03125": 50, "72": 50, "375000": 50, "579102": 50, "736328": 50, "035156": 50, "921875": 50, "531250": 50, "31250": 50, "67": 50, "37500": 50, "vologda": 50, "With": 50, "howev": 50, "551734": 50, "6561005": 50, "520": 50, "551753": 50, "023": 50, "3051": 50, "403190": 50, "6102": 50, "806380": 50, "551242": 50, "888": 50, "6561217": 50, "885": 50, "551255": 50, "024": 50, "947": 50, "828484": 50, "551677": 50, "6560979": 50, "551735": 50, "071": 50, "643": 50, "583783": 50, "3217": 50, "918916": 50, "2574": 50, "335133": 50, "117": 50, "551600": 50, "420": 50, "6561013": 50, "594": 50, "551657": 50, "042": 50, "682": 50, "649464": 50, "550484": 50, "802": 50, "6569857": 50, "550472": 50, "896": 50, "230": 50, "815777": 50, "872": 50, "410": 50, "471": 50, "148": 50, "27it": 50, "9781": 50, "551681": 50, "6564001": 50, "551661": 50, "504": 50, "758281": 50, "16467": 50, "551668": 50, "426": 50, "6563984": 50, "551678": 50, "463": 50, "814782": 50, "In": 50, "But": 50, "lu_block": 50, "321": 50, "16it": 50, "few": 50, "acc": 50, "acc_r": 50, "18750": 50, "87500": 50, "potenti": 50, "suppli": 50, "acc_res_st": 50, "491": 50, "557733": 50, "822": 50, "6566501": 50, "805": 50, "557716": 50, "673": 50, "557929": 50, "513": 50, "6566532": 50, "311": 50, "557868": 50, "701": 50, "039062": 50, "674": 50, "557988": 50, "145": 50, "6566536": 50, "con": 50, "con_r": 50, "visualiz": 50, "norm": [50, 51], "prov": 50, "prov_r": 50, "670": 50, "192x37": 50, "780": 50, "835": 50, "937": 50, "52x18": 50, "967": 50, "022": 50, "26x4": 50, "028": 50, "039": 50, "053": 50, "provision_grav": 50, "prov_res_gr": 50, "785": 50, "8027122468957005": 50, "wide": 50, "5132829977628636": 50, "provision_greedi": 50, "again": 50, "increas": [50, 51], "prov_res_aft": 50, "556": 50, "193x37": 50, "662": 50, "820": 50, "53x18": 50, "853": 50, "876": 50, "910": 50, "27x4": 50, "929": 50, "946": 50, "modif": 50, "provision_upd": 50, "select": 50, "concept": 50, "specifii": 50, "050029e": 50, "423072e": 50, "541366": 50, "098806": 50, "056246": 50, "94819": 50, "799728": 50, "221511": 50, "446546": 50, "299077": 50, "043187": 50, "013304e": 50, "4299": 50, "428059": 50, "648861": 50, "107986": 50, "085385": 50, "264698": 50, "469765": 50, "175149": 50, "3599": 50, "332605": 50, "706084e": 50, "021097": 50, "400012": 50, "3204": 50, "576494": 50, "019534e": 50, "079725": 50, "543104": 50, "815": 50, "550": 50, "20it": 50, "didn": 50, "8472210572229025": 50, "7675453047775948": 50, "rdylgn": 50, "180": 50, "2585": 50, "590": 50, "2629": 50, "623": 50, "2630": 50, "2637": 50, "2661": 50, "660": 50, "201": 50, "clear_df": 50, "640": 50, "5665": 50, "1160": 50, "1482": 50, "587": 50, "3934": 50, "prov_ann": 50, "002": 50, "203x104": 50, "400": 50, "567": 50, "26x51": 50, "602": 50, "624": 50, "652": 50, "2x42": 50, "657": 50, "666": 50, "675": 50, "680": 50, "regulatori": 51, "util": 51, "contact": 51, "public": 51, "divis": 51, "smallest": 51, "analysi": 51, "further": 51, "aggreg": 51, "hierarchi": 51, "regard": 51, "attitud": 51, "extern": 51, "identif": 51, "context": 51, "built": 51, "scale": 51, "competit": 51, "resid": 51, "pretti": 51, "box": 51, "student": 51, "balanc": 51, "friendli": 51, "programm": 51, "respect": 51, "contributor": 51, "622280": 51, "learn": 51}, "objects": {"blocksnet": [[1, 0, 0, "-", "method"], [14, 0, 0, "-", "models"], [19, 0, 0, "-", "preprocessing"], [25, 0, 0, "-", "utils"]], "blocksnet.method": [[2, 0, 0, "-", "accessibility"], [3, 0, 0, "-", "annealing_optimizer"], [4, 0, 0, "-", "base_method"], [5, 0, 0, "-", "centrality"], [6, 0, 0, "-", "connectivity"], [7, 0, 0, "-", "diversity"], [8, 0, 0, "-", "integration"], [9, 0, 0, "-", "land_use_prediction"], [10, 0, 0, "-", "population_centrality"], [11, 0, 0, "-", "provision"], [12, 0, 0, "-", "spacematrix"], [13, 0, 0, "-", "vacant_area"]], "blocksnet.method.accessibility": [[2, 1, 1, "", "Accessibility"]], "blocksnet.method.accessibility.Accessibility": [[2, 2, 1, "id1", "calculate"], [2, 3, 1, "", "model_computed_fields"], [2, 2, 1, "id0", "plot"]], "blocksnet.method.annealing_optimizer": [[3, 1, 1, "", "AnnealingOptimizer"], [3, 1, 1, "", "Indicator"], [3, 1, 1, "", "Variable"]], "blocksnet.method.annealing_optimizer.AnnealingOptimizer": [[3, 2, 1, "", "_check_constraints"], [3, 2, 1, "", "_generate_indicators"], [3, 2, 1, "", "_generate_initial_X"], [3, 2, 1, "", "_get_clear_df"], [3, 2, 1, "", "_perturb"], [3, 2, 1, "", "calculate"], [3, 3, 1, "", "model_computed_fields"], [3, 3, 1, "", "on_iteration"], [3, 2, 1, "", "to_bricks_df"], [3, 2, 1, "", "to_df"], [3, 2, 1, "", "to_gdf"]], "blocksnet.method.annealing_optimizer.Indicator": [[3, 4, 1, "", "build_floor_area"], [3, 4, 1, "", "footprint_area"], [3, 4, 1, "", "integrated_area"], [3, 4, 1, "", "living_area"], [3, 4, 1, "", "non_integrated_area"], [3, 4, 1, "", "population"], [3, 4, 1, "", "site_area"], [3, 2, 1, "", "to_dict"]], "blocksnet.method.annealing_optimizer.Variable": [[3, 4, 1, "", "area"], [3, 4, 1, "", "capacity"], [3, 2, 1, "", "to_dict"]], "blocksnet.method.base_method": [[4, 1, 1, "", "BaseMethod"]], "blocksnet.method.base_method.BaseMethod": [[4, 2, 1, "id0", "calculate"], [4, 3, 1, "", "city_model"], [4, 3, 1, "", "model_computed_fields"], [4, 2, 1, "id1", "plot"], [4, 3, 1, "", "verbose"]], "blocksnet.method.centrality": [[5, 1, 1, "", "Centrality"]], "blocksnet.method.centrality.Centrality": [[5, 2, 1, "id1", "calculate"], [5, 4, 1, "", "connectivity"], [5, 4, 1, "", "diversity"], [5, 3, 1, "", "model_computed_fields"], [5, 2, 1, "id0", "plot"]], "blocksnet.method.connectivity": [[6, 1, 1, "", "Connectivity"]], "blocksnet.method.connectivity.Connectivity": [[6, 2, 1, "id1", "calculate"], [6, 3, 1, "", "model_computed_fields"], [6, 2, 1, "id0", "plot"]], "blocksnet.method.diversity": [[7, 1, 1, "", "Diversity"]], "blocksnet.method.diversity.Diversity": [[7, 2, 1, "", "_shannon_index"], [7, 2, 1, "id1", "calculate"], [7, 3, 1, "", "model_computed_fields"], [7, 2, 1, "id0", "plot"]], "blocksnet.method.integration": [[8, 1, 1, "", "Integration"], [8, 1, 1, "", "IntegrationType"], [8, 1, 1, "", "WeightType"]], "blocksnet.method.integration.Integration": [[8, 2, 1, "", "_get_dual_graph"], [8, 4, 1, "", "blocks"], [8, 2, 1, "", "calculate"], [8, 2, 1, "", "clusterize"], [8, 4, 1, "", "edges"], [8, 3, 1, "", "graph"], [8, 3, 1, "", "model_computed_fields"], [8, 2, 1, "", "plot"], [8, 2, 1, "", "validate_graph"], [8, 2, 1, "", "validate_model"]], "blocksnet.method.integration.IntegrationType": [[8, 3, 1, "", "GLOBAL"], [8, 3, 1, "", "LOCAL"]], "blocksnet.method.integration.WeightType": [[8, 3, 1, "", "ANGULAR"], [8, 3, 1, "", "LENGTH"]], "blocksnet.method.land_use_prediction": [[9, 1, 1, "", "LandUsePrediction"]], "blocksnet.method.land_use_prediction.LandUsePrediction": [[9, 2, 1, "", "_get_blocks_gdf"], [9, 2, 1, "", "_get_land_uses_services"], [9, 2, 1, "", "_get_unique_per_landuse"], [9, 2, 1, "", "_intersects"], [9, 2, 1, "", "_predict_block_landuse"], [9, 2, 1, "", "_predict_block_landuse_cosine_similarity"], [9, 2, 1, "", "calculate"], [9, 3, 1, "", "model_computed_fields"], [9, 2, 1, "", "plot"]], "blocksnet.method.population_centrality": [[10, 1, 1, "", "PopulationCentrality"]], "blocksnet.method.population_centrality.PopulationCentrality": [[10, 2, 1, "id1", "calculate"], [10, 3, 1, "", "model_computed_fields"], [10, 2, 1, "id0", "plot"]], "blocksnet.method.provision": [[11, 1, 1, "", "Provision"], [11, 1, 1, "", "ProvisionMethod"]], "blocksnet.method.provision.Provision": [[11, 2, 1, "", "_get_blocks_gdf"], [11, 2, 1, "", "_get_lower_bound"], [11, 2, 1, "", "_get_upper_bound"], [11, 2, 1, "", "_greedy_provision"], [11, 2, 1, "", "_lp_provision"], [11, 2, 1, "id4", "calculate"], [11, 2, 1, "id3", "get_bounds"], [11, 3, 1, "", "model_computed_fields"], [11, 2, 1, "id0", "plot"], [11, 2, 1, "id1", "stat"], [11, 2, 1, "id2", "total"]], "blocksnet.method.provision.ProvisionMethod": [[11, 3, 1, "", "GRAVITATIONAL"], [11, 3, 1, "", "GREEDY"], [11, 3, 1, "", "LINEAR"]], "blocksnet.method.spacematrix": [[12, 1, 1, "", "Spacematrix"]], "blocksnet.method.spacematrix.Spacematrix": [[12, 2, 1, "", "_get_spacematrix_morphotypes"], [12, 2, 1, "", "_get_strelka_morphotypes"], [12, 2, 1, "", "_name_spacematrix_morphotypes"], [12, 2, 1, "id1", "calculate"], [12, 3, 1, "", "model_computed_fields"], [12, 3, 1, "", "number_of_clusters"], [12, 2, 1, "id0", "plot"], [12, 3, 1, "", "random_state"]], "blocksnet.method.vacant_area": [[13, 1, 1, "", "VacantArea"]], "blocksnet.method.vacant_area.VacantArea": [[13, 2, 1, "", "_dwn_amenity"], [13, 2, 1, "", "_dwn_buildings"], [13, 2, 1, "", "_dwn_highway"], [13, 2, 1, "", "_dwn_landuse"], [13, 2, 1, "", "_dwn_leisure"], [13, 2, 1, "", "_dwn_natural"], [13, 2, 1, "", "_dwn_other"], [13, 2, 1, "", "_dwn_path"], [13, 2, 1, "", "_dwn_railway"], [13, 2, 1, "", "_dwn_waterway"], [13, 3, 1, "", "area_min"], [13, 3, 1, "", "area_to_length_min"], [13, 3, 1, "", "area_to_mrr_area_min"], [13, 3, 1, "", "blocks_buffer_max"], [13, 3, 1, "", "blocks_buffer_min"], [13, 3, 1, "", "buildings_buffer"], [13, 2, 1, "", "calculate"], [13, 3, 1, "", "model_computed_fields"], [13, 3, 1, "", "path_buffer"], [13, 3, 1, "", "roads_buffer"]], "blocksnet.models": [[15, 0, 0, "-", "city"], [16, 0, 0, "-", "land_use"], [17, 0, 0, "-", "schema"], [18, 0, 0, "-", "service_type"]], "blocksnet.models.city": [[15, 1, 1, "", "Block"], [15, 1, 1, "", "BlockService"], [15, 1, 1, "", "Building"], [15, 1, 1, "", "BuildingService"], [15, 1, 1, "", "City"], [15, 1, 1, "", "Service"]], "blocksnet.models.city.Block": [[15, 2, 1, "", "_"], [15, 2, 1, "", "__getitem__"], [15, 2, 1, "", "__hash__"], [15, 4, 1, "", "all_services"], [15, 4, 1, "", "build_floor_area"], [15, 3, 1, "", "buildings"], [15, 4, 1, "", "buildings_indicators"], [15, 4, 1, "", "business_area"], [15, 3, 1, "", "city"], [15, 4, 1, "", "footprint_area"], [15, 2, 1, "", "from_gdf"], [15, 4, 1, "", "fsi"], [15, 3, 1, "", "geometry"], [15, 2, 1, "", "get_buildings_gdf"], [15, 2, 1, "", "get_services_gdf"], [15, 4, 1, "", "gsi"], [15, 3, 1, "", "id"], [15, 4, 1, "", "is_living"], [15, 4, 1, "", "l"], [15, 3, 1, "", "land_use"], [15, 4, 1, "", "land_use_service_types"], [15, 4, 1, "", "living_area"], [15, 4, 1, "", "living_demand"], [15, 3, 1, "", "model_computed_fields"], [15, 4, 1, "", "mxi"], [15, 4, 1, "", "non_living_area"], [15, 4, 1, "", "osr"], [15, 4, 1, "", "population"], [15, 3, 1, "", "services"], [15, 4, 1, "", "services_indicators"], [15, 4, 1, "", "share_business"], [15, 4, 1, "", "share_living"], [15, 4, 1, "", "site_area"], [15, 4, 1, "", "territory_indicators"], [15, 2, 1, "", "to_dict"], [15, 2, 1, "", "update_buildings"], [15, 2, 1, "", "update_services"], [15, 2, 1, "", "validate_land_use"]], "blocksnet.models.city.BlockService": [[15, 3, 1, "", "block"], [15, 3, 1, "", "geometry"], [15, 3, 1, "", "model_computed_fields"], [15, 2, 1, "", "to_dict"], [15, 2, 1, "", "validate_model"]], "blocksnet.models.city.Building": [[15, 3, 1, "", "block"], [15, 3, 1, "", "build_floor_area"], [15, 3, 1, "", "footprint_area"], [15, 3, 1, "", "geometry"], [15, 3, 1, "", "id"], [15, 4, 1, "", "is_living"], [15, 3, 1, "", "living_area"], [15, 3, 1, "", "model_computed_fields"], [15, 3, 1, "", "non_living_area"], [15, 3, 1, "", "number_of_floors"], [15, 3, 1, "", "population"], [15, 3, 1, "", "services"], [15, 2, 1, "", "to_dict"], [15, 2, 1, "", "update_services"], [15, 2, 1, "", "validate_model"]], "blocksnet.models.city.BuildingService": [[15, 2, 1, "", "attach_geometry"], [15, 3, 1, "", "building"], [15, 3, 1, "", "geometry"], [15, 3, 1, "", "model_computed_fields"], [15, 2, 1, "", "to_dict"], [15, 2, 1, "", "validate_model"]], "blocksnet.models.city.City": [[15, 2, 1, "", "_"], [15, 2, 1, "", "__str__"], [15, 2, 1, "id8", "add_service_type"], [15, 4, 1, "", "blocks"], [15, 4, 1, "", "buildings"], [15, 4, 1, "", "epsg"], [15, 2, 1, "", "from_pickle"], [15, 2, 1, "id4", "get_blocks_gdf"], [15, 2, 1, "id2", "get_buildings_gdf"], [15, 2, 1, "id9", "get_distance"], [15, 2, 1, "id11", "get_in_edges"], [15, 2, 1, "id1", "get_land_use_service_types"], [15, 2, 1, "id10", "get_out_edges"], [15, 2, 1, "id3", "get_services_gdf"], [15, 4, 1, "", "loaded_service_types"], [15, 2, 1, "id0", "plot"], [15, 4, 1, "", "service_types"], [15, 4, 1, "", "services"], [15, 2, 1, "", "to_pickle"], [15, 2, 1, "id6", "update_buildings"], [15, 2, 1, "id5", "update_land_use"], [15, 2, 1, "id7", "update_services"]], "blocksnet.models.city.Service": [[15, 2, 1, "", "_fill_capacity_and_area"], [15, 2, 1, "", "_get_min_brick"], [15, 3, 1, "", "area"], [15, 3, 1, "", "capacity"], [15, 3, 1, "", "is_integrated"], [15, 3, 1, "", "model_computed_fields"], [15, 3, 1, "", "service_type"], [15, 2, 1, "", "to_dict"]], "blocksnet.models.land_use": [[16, 1, 1, "", "LandUse"]], "blocksnet.models.land_use.LandUse": [[16, 3, 1, "", "AGRICULTURE"], [16, 3, 1, "", "BUSINESS"], [16, 3, 1, "", "INDUSTRIAL"], [16, 3, 1, "", "RECREATION"], [16, 3, 1, "", "RESIDENTIAL"], [16, 3, 1, "", "SPECIAL"], [16, 3, 1, "", "TRANSPORT"]], "blocksnet.models.schema": [[17, 1, 1, "", "BaseSchema"]], "blocksnet.models.schema.BaseSchema": [[17, 1, 1, "", "Config"], [17, 2, 1, "", "check_geometry"], [17, 3, 1, "", "geometry"], [17, 3, 1, "", "idx"], [17, 2, 1, "", "to_gdf"]], "blocksnet.models.schema.BaseSchema.Config": [[17, 3, 1, "", "add_missing_columns"], [17, 3, 1, "", "name"], [17, 3, 1, "", "strict"]], "blocksnet.models.service_type": [[18, 1, 1, "", "ServiceBrick"], [18, 1, 1, "", "ServiceType"]], "blocksnet.models.service_type.ServiceBrick": [[18, 3, 1, "", "area"], [18, 3, 1, "", "capacity"], [18, 3, 1, "", "is_integrated"], [18, 3, 1, "", "model_computed_fields"], [18, 3, 1, "", "parking_area"]], "blocksnet.models.service_type.ServiceType": [[18, 2, 1, "", "__hash__"], [18, 2, 1, "", "__str__"], [18, 3, 1, "", "accessibility"], [18, 3, 1, "", "bricks"], [18, 2, 1, "", "calculate_in_need"], [18, 3, 1, "", "code"], [18, 3, 1, "", "demand"], [18, 2, 1, "", "get_bricks"], [18, 3, 1, "", "land_use"], [18, 3, 1, "", "model_computed_fields"], [18, 3, 1, "", "name"], [18, 2, 1, "", "to_dict"], [18, 2, 1, "", "validate_bricks"], [18, 2, 1, "", "validate_land_use"]], "blocksnet.preprocessing": [[20, 0, 0, "-", "accessibility_processor"], [21, 0, 0, "-", "blocks_generator"], [22, 0, 0, "-", "blocks_splitter"], [23, 0, 0, "-", "land_use_optimizer"], [24, 0, 0, "-", "land_use_processor"]], "blocksnet.preprocessing.accessibility_processor": [[20, 1, 1, "", "AccessibilityProcessor"], [20, 1, 1, "", "BlocksSchema"]], "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor": [[20, 2, 1, "", "_fix_graph"], [20, 2, 1, "", "_get_broken_nodes"], [20, 2, 1, "", "_get_island_nodes"], [20, 2, 1, "", "get_accessibility_matrix"], [20, 2, 1, "", "get_intermodal_graph"], [20, 2, 1, "", "plot"], [20, 4, 1, "", "polygon"]], "blocksnet.preprocessing.accessibility_processor.BlocksSchema": [[20, 1, 1, "", "Config"]], "blocksnet.preprocessing.accessibility_processor.BlocksSchema.Config": [[20, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator": [[21, 1, 1, "", "BlocksGenerator"], [21, 1, 1, "", "BlocksSchema"], [21, 1, 1, "", "BoundariesSchema"], [21, 1, 1, "", "RailwaysSchema"], [21, 1, 1, "", "RoadsSchema"], [21, 1, 1, "", "WaterSchema"]], "blocksnet.preprocessing.blocks_generator.BlocksGenerator": [[21, 2, 1, "", "_get_enclosures"], [21, 2, 1, "", "_reindex_blocks"], [21, 4, 1, "", "local_crs"], [21, 2, 1, "id0", "run"]], "blocksnet.preprocessing.blocks_generator.BlocksSchema": [[21, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.BlocksSchema.Config": [[21, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.BoundariesSchema": [[21, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.BoundariesSchema.Config": [[21, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.RailwaysSchema": [[21, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.RailwaysSchema.Config": [[21, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.RoadsSchema": [[21, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.RoadsSchema.Config": [[21, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.WaterSchema": [[21, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.WaterSchema.Config": [[21, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_splitter": [[22, 1, 1, "", "BlocksSchema"], [22, 1, 1, "", "BlocksSplitter"], [22, 1, 1, "", "BuildingsSchema"]], "blocksnet.preprocessing.blocks_splitter.BlocksSchema": [[22, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_splitter.BlocksSchema.Config": [[22, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_splitter.BlocksSplitter": [[22, 2, 1, "", "_drop_index_columns"], [22, 2, 1, "", "_split_block"], [22, 2, 1, "id0", "run"]], "blocksnet.preprocessing.blocks_splitter.BuildingsSchema": [[22, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_splitter.BuildingsSchema.Config": [[22, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_optimizer": [[23, 1, 1, "", "BlocksSchema"], [23, 1, 1, "", "LandUseOptimizer"]], "blocksnet.preprocessing.land_use_optimizer.BlocksSchema": [[23, 1, 1, "", "Config"]], "blocksnet.preprocessing.land_use_optimizer.BlocksSchema.Config": [[23, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer": [[23, 2, 1, "", "_check_adj_rules"], [23, 2, 1, "", "_check_area_ranges"], [23, 2, 1, "", "_check_ratio_ranges"], [23, 2, 1, "", "_generate_initial_X"], [23, 2, 1, "", "_get_adjacency_graph"], [23, 2, 1, "", "_is_block_large"], [23, 2, 1, "", "_objective"], [23, 2, 1, "", "_perturb"], [23, 2, 1, "", "_split_large_blocks"], [23, 2, 1, "", "_split_polygon"], [23, 2, 1, "", "run"], [23, 2, 1, "", "to_gdf"], [23, 2, 1, "", "to_shares_dict"]], "blocksnet.preprocessing.land_use_processor": [[24, 1, 1, "", "BlocksSchema"], [24, 1, 1, "", "LandUseProcessor"], [24, 1, 1, "", "ProcessedBlocksSchema"], [24, 1, 1, "", "ZonesSchema"]], "blocksnet.preprocessing.land_use_processor.BlocksSchema": [[24, 1, 1, "", "Config"]], "blocksnet.preprocessing.land_use_processor.BlocksSchema.Config": [[24, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_processor.LandUseProcessor": [[24, 2, 1, "id0", "run"]], "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema": [[24, 1, 1, "", "Config"], [24, 3, 1, "", "land_use"], [24, 3, 1, "", "zone"]], "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.Config": [[24, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_processor.ZonesSchema": [[24, 1, 1, "", "Config"], [24, 3, 1, "", "zone"]], "blocksnet.preprocessing.land_use_processor.ZonesSchema.Config": [[24, 3, 1, "", "name"]], "blocksnet.utils": [[26, 0, 0, "-", "helpers"], [27, 0, 0, "-", "service_types"]], "blocksnet.utils.helpers": [[26, 5, 1, "", "drop_contained_geometries"], [26, 5, 1, "", "fill_holes"], [26, 5, 1, "", "filter_bottlenecks"], [26, 5, 1, "", "get_polygon_aspect_ratio"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"about": 0, "u": 0, "contact": 0, "public": 0, "blocksnet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 50, 51], "method": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 37, 40, 44, 45, 50], "access": [2, 33, 39, 50], "annealing_optim": 3, "base_method": 4, "central": [5, 41], "connect": [6, 41, 42, 50], "divers": [7, 43], "integr": [8, 45], "land_use_predict": 9, "population_centr": 10, "provis": [11, 47, 50], "spacematrix": [12, 48], "vacant_area": 13, "model": [14, 15, 16, 17, 18, 37, 50], "citi": [15, 33, 34, 37, 40, 45, 50], "land_us": 16, "schema": 17, "service_typ": [18, 27], "preprocess": [19, 20, 21, 22, 23, 24], "accessibility_processor": 20, "blocks_gener": 21, "blocks_splitt": 22, "land_use_optim": 23, "land_use_processor": 24, "util": [25, 26, 27, 47], "helper": 26, "api": 28, "document": [28, 29, 51], "contribut": 29, "how": [29, 32], "befor": 29, "submit": 29, "your": 29, "pull": 29, "request": 29, "after": 29, "acknowledg": [29, 51], "faq": 30, "what": 30, "i": 30, "quickstart": 32, "instal": [32, 50], "us": [32, 36], "gener": [33, 34, 50], "intermod": [33, 50], "graph": [33, 50], "calcul": [33, 50], "matrix": [33, 50], "read": 33, "block": [33, 34, 50], "initi": [33, 37, 50], "processor": 33, "instanc": 33, "an": [33, 50], "layer": [34, 37, 50], "blocksgener": 34, "blockssplitt": 34, "landuseprocessor": 34, "save": 34, "result": 34, "case": 35, "land": 36, "optim": [36, 40, 50], "servic": [36, 41, 50], "updat": [37, 47], "other": [37, 46], "wai": [37, 46], "oper": 37, "exampl": 38, "anneal": 40, "prepar": [40, 45], "base": 41, "popul": 41, "landus": 46, "predict": 46, "cosin": 46, "similar": 46, "around": 46, "scenario": 47, "some": 47, "vacant": 49, "area": 49, "pipelin": 50, "0": 50, "1": 50, "2": 50, "3": 50, "4": 50, "5": 50, "urban": 50, "environ": 50, "analysi": 50, "composit": 50, "welcom": 51, "featur": 51}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "Contacts": [[0, "contacts"]], "Publications": [[0, "publications"]], "blocksnet.method": [[1, "module-blocksnet.method"]], "blocksnet.method.accessibility": [[2, "module-blocksnet.method.accessibility"]], "blocksnet.method.annealing_optimizer": [[3, "module-blocksnet.method.annealing_optimizer"]], "blocksnet.method.base_method": [[4, "module-blocksnet.method.base_method"]], "blocksnet.method.centrality": [[5, "module-blocksnet.method.centrality"]], "blocksnet.method.connectivity": [[6, "module-blocksnet.method.connectivity"]], "blocksnet.method.diversity": [[7, "module-blocksnet.method.diversity"]], "blocksnet.method.integration": [[8, "module-blocksnet.method.integration"]], "blocksnet.method.land_use_prediction": [[9, "module-blocksnet.method.land_use_prediction"]], "blocksnet.method.population_centrality": [[10, "module-blocksnet.method.population_centrality"]], "blocksnet.method.provision": [[11, "module-blocksnet.method.provision"]], "blocksnet.method.spacematrix": [[12, "module-blocksnet.method.spacematrix"]], "blocksnet.method.vacant_area": [[13, "module-blocksnet.method.vacant_area"]], "blocksnet.models": [[14, "module-blocksnet.models"]], "blocksnet.models.city": [[15, "module-blocksnet.models.city"]], "blocksnet.models.land_use": [[16, "module-blocksnet.models.land_use"]], "blocksnet.models.schema": [[17, "module-blocksnet.models.schema"]], "blocksnet.models.service_type": [[18, "module-blocksnet.models.service_type"]], "blocksnet.preprocessing": [[19, "module-blocksnet.preprocessing"]], "blocksnet.preprocessing.accessibility_processor": [[20, "module-blocksnet.preprocessing.accessibility_processor"]], "blocksnet.preprocessing.blocks_generator": [[21, "module-blocksnet.preprocessing.blocks_generator"]], "blocksnet.preprocessing.blocks_splitter": [[22, "module-blocksnet.preprocessing.blocks_splitter"]], "blocksnet.preprocessing.land_use_optimizer": [[23, "module-blocksnet.preprocessing.land_use_optimizer"]], "blocksnet.preprocessing.land_use_processor": [[24, "module-blocksnet.preprocessing.land_use_processor"]], "blocksnet.utils": [[25, "module-blocksnet.utils"]], "blocksnet.utils.helpers": [[26, "module-blocksnet.utils.helpers"]], "blocksnet.utils.service_types": [[27, "module-blocksnet.utils.service_types"]], "API documentation": [[28, "api-documentation"]], "Contributing": [[29, "contributing"]], "How to contribute": [[29, "how-to-contribute"]], "Before submitting your pull request": [[29, "before-submitting-your-pull-request"]], "Contribute to the documentation": [[29, "contribute-to-the-documentation"]], "After submitting your pull request": [[29, "after-submitting-your-pull-request"]], "Acknowledgements": [[29, "acknowledgements"], [51, "acknowledgements"]], "FAQ": [[30, "faq"]], "What is BlocksNet?": [[30, null]], "BlocksNet": [[31, "blocksnet"]], "Quickstart": [[32, "quickstart"]], "Installation": [[32, "installation"]], "How to use": [[32, "how-to-use"]], "Generating intermodal graph and calculating accessibility matrix": [[33, "Generating-intermodal-graph-and-calculating-accessibility-matrix"]], "Read blocks and initialize processor instance": [[33, "Read-blocks-and-initialize-processor-instance"]], "Generate an intermodal city graph": [[33, "Generate-an-intermodal-city-graph"]], "Calculate the accessibility matrix": [[33, "Calculate-the-accessibility-matrix"]], "City blocks layer generating": [[34, "City-blocks-layer-generating"]], "BlocksGenerator": [[34, "BlocksGenerator"]], "BlocksSplitter": [[34, "BlocksSplitter"]], "LandUseProcessor": [[34, "LandUseProcessor"]], "Saving the results": [[34, "Saving-the-results"]], "Cases": [[35, "cases"]], "Land Use Optimization": [[36, "Land-Use-Optimization"]], "Optimizing land uses": [[36, "Optimizing-land-uses"]], "Services optimizer": [[36, "Services-optimizer"]], "City initialization and methods": [[37, "City-initialization-and-methods"]], "Initialization": [[37, "Initialization"]], "Update layers": [[37, "Update-layers"]], "Methods and other ways to operate the City model": [[37, "Methods-and-other-ways-to-operate-the-City-model"]], "Examples": [[38, "examples"]], "Accessibility": [[39, "Accessibility"]], "Annealing optimizer": [[40, "Annealing-optimizer"]], "Prepare city": [[40, "Prepare-city"], [45, "Prepare-city"]], "Method": [[40, "Method"], [45, "Method"]], "Centrality": [[41, "Centrality"]], "Centrality based on connectivity and services": [[41, "Centrality-based-on-connectivity-and-services"]], "Centrality based on population": [[41, "Centrality-based-on-population"]], "Connectivity": [[42, "Connectivity"]], "Diversity": [[43, "Diversity"]], "Methods": [[44, "methods"]], "Integration": [[45, "Integration"]], "LandUse prediction": [[46, "LandUse-prediction"]], "Cosine similarity": [[46, "Cosine-similarity"]], "Other way around": [[46, "Other-way-around"]], "Provision": [[47, "Provision"]], "Update scenario": [[47, "Update-scenario"]], "Some utilities": [[47, "Some-utilities"]], "Spacematrix": [[48, "Spacematrix"]], "Vacant Area": [[49, "Vacant-Area"]], "Pipeline": [[50, "Pipeline"]], "0. BlocksNet Installation": [[50, "0.-BlocksNet-Installation"]], "1. Generating a layer of city blocks": [[50, "1.-Generating-a-layer-of-city-blocks"]], "2. Generating an intermodal graph": [[50, "2.-Generating-an-intermodal-graph"]], "3. Calculating an accessibility matrix": [[50, "3.-Calculating-an-accessibility-matrix"]], "4. City model initialization": [[50, "4.-City-model-initialization"]], "5. Methods for urban environment analysis": [[50, "5.-Methods-for-urban-environment-analysis"]], "5.1. Accessibility": [[50, "5.1.-Accessibility"]], "5.2. Connectivity": [[50, "5.2.-Connectivity"]], "5.3. Service Provision": [[50, "5.3.-Service-Provision"]], "5.4. Services composition optimization": [[50, "5.4.-Services-composition-optimization"]], "Welcome to BlocksNet documentation!": [[51, "welcome-to-blocksnet-documentation"]], "Documentation:": [[51, "documentation"]], "Features:": [[51, "features"]]}, "indexentries": {"blocksnet.method": [[1, "module-blocksnet.method"]], "module": [[1, "module-blocksnet.method"], [2, "module-blocksnet.method.accessibility"], [3, "module-blocksnet.method.annealing_optimizer"], [4, "module-blocksnet.method.base_method"], [5, "module-blocksnet.method.centrality"], [6, "module-blocksnet.method.connectivity"], [7, "module-blocksnet.method.diversity"], [8, "module-blocksnet.method.integration"], [9, "module-blocksnet.method.land_use_prediction"], [10, "module-blocksnet.method.population_centrality"], [11, "module-blocksnet.method.provision"], [12, "module-blocksnet.method.spacematrix"], [13, "module-blocksnet.method.vacant_area"], [14, "module-blocksnet.models"], [15, "module-blocksnet.models.city"], [16, "module-blocksnet.models.land_use"], [17, "module-blocksnet.models.schema"], [18, "module-blocksnet.models.service_type"], [19, "module-blocksnet.preprocessing"], [20, "module-blocksnet.preprocessing.accessibility_processor"], [21, "module-blocksnet.preprocessing.blocks_generator"], [22, "module-blocksnet.preprocessing.blocks_splitter"], [23, "module-blocksnet.preprocessing.land_use_optimizer"], [24, "module-blocksnet.preprocessing.land_use_processor"], [25, "module-blocksnet.utils"], [26, "module-blocksnet.utils.helpers"], [27, "module-blocksnet.utils.service_types"]], "accessibility (class in blocksnet.method.accessibility)": [[2, "blocksnet.method.accessibility.Accessibility"]], "blocksnet.method.accessibility": [[2, "module-blocksnet.method.accessibility"]], "calculate() (blocksnet.method.accessibility.accessibility method)": [[2, "blocksnet.method.accessibility.Accessibility.calculate"], [2, "id1"]], "model_computed_fields (blocksnet.method.accessibility.accessibility attribute)": [[2, "blocksnet.method.accessibility.Accessibility.model_computed_fields"]], "plot() (blocksnet.method.accessibility.accessibility method)": [[2, "blocksnet.method.accessibility.Accessibility.plot"]], "plot() (blocksnet.method.accessibility.accessibility static method)": [[2, "id0"]], "annealingoptimizer (class in blocksnet.method.annealing_optimizer)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer"]], "indicator (class in blocksnet.method.annealing_optimizer)": [[3, "blocksnet.method.annealing_optimizer.Indicator"]], "variable (class in blocksnet.method.annealing_optimizer)": [[3, "blocksnet.method.annealing_optimizer.Variable"]], "_check_constraints() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._check_constraints"]], "_generate_indicators() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._generate_indicators"]], "_generate_initial_x() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._generate_initial_X"]], "_get_clear_df() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._get_clear_df"]], "_perturb() (blocksnet.method.annealing_optimizer.annealingoptimizer static method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._perturb"]], "area (blocksnet.method.annealing_optimizer.variable property)": [[3, "blocksnet.method.annealing_optimizer.Variable.area"]], "blocksnet.method.annealing_optimizer": [[3, "module-blocksnet.method.annealing_optimizer"]], "build_floor_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.build_floor_area"]], "calculate() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.calculate"]], "capacity (blocksnet.method.annealing_optimizer.variable property)": [[3, "blocksnet.method.annealing_optimizer.Variable.capacity"]], "footprint_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.footprint_area"]], "integrated_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.integrated_area"]], "living_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.living_area"]], "model_computed_fields (blocksnet.method.annealing_optimizer.annealingoptimizer attribute)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.model_computed_fields"]], "non_integrated_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.non_integrated_area"]], "on_iteration (blocksnet.method.annealing_optimizer.annealingoptimizer attribute)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.on_iteration"]], "population (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.population"]], "site_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.site_area"]], "to_bricks_df() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.to_bricks_df"]], "to_df() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.to_df"]], "to_dict() (blocksnet.method.annealing_optimizer.indicator method)": [[3, "blocksnet.method.annealing_optimizer.Indicator.to_dict"]], "to_dict() (blocksnet.method.annealing_optimizer.variable method)": [[3, "blocksnet.method.annealing_optimizer.Variable.to_dict"]], "to_gdf() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.to_gdf"]], "basemethod (class in blocksnet.method.base_method)": [[4, "blocksnet.method.base_method.BaseMethod"]], "blocksnet.method.base_method": [[4, "module-blocksnet.method.base_method"]], "calculate() (blocksnet.method.base_method.basemethod method)": [[4, "blocksnet.method.base_method.BaseMethod.calculate"], [4, "id0"]], "city_model (blocksnet.method.base_method.basemethod attribute)": [[4, "blocksnet.method.base_method.BaseMethod.city_model"]], "model_computed_fields (blocksnet.method.base_method.basemethod attribute)": [[4, "blocksnet.method.base_method.BaseMethod.model_computed_fields"]], "plot() (blocksnet.method.base_method.basemethod method)": [[4, "blocksnet.method.base_method.BaseMethod.plot"], [4, "id1"]], "verbose (blocksnet.method.base_method.basemethod attribute)": [[4, "blocksnet.method.base_method.BaseMethod.verbose"]], "centrality (class in blocksnet.method.centrality)": [[5, "blocksnet.method.centrality.Centrality"]], "blocksnet.method.centrality": [[5, "module-blocksnet.method.centrality"]], "calculate() (blocksnet.method.centrality.centrality method)": [[5, "blocksnet.method.centrality.Centrality.calculate"], [5, "id1"]], "connectivity (blocksnet.method.centrality.centrality property)": [[5, "blocksnet.method.centrality.Centrality.connectivity"]], "diversity (blocksnet.method.centrality.centrality property)": [[5, "blocksnet.method.centrality.Centrality.diversity"]], "model_computed_fields (blocksnet.method.centrality.centrality attribute)": [[5, "blocksnet.method.centrality.Centrality.model_computed_fields"]], "plot() (blocksnet.method.centrality.centrality method)": [[5, "blocksnet.method.centrality.Centrality.plot"]], "plot() (blocksnet.method.centrality.centrality static method)": [[5, "id0"]], "connectivity (class in blocksnet.method.connectivity)": [[6, "blocksnet.method.connectivity.Connectivity"]], "blocksnet.method.connectivity": [[6, "module-blocksnet.method.connectivity"]], "calculate() (blocksnet.method.connectivity.connectivity method)": [[6, "blocksnet.method.connectivity.Connectivity.calculate"], [6, "id1"]], "model_computed_fields (blocksnet.method.connectivity.connectivity attribute)": [[6, "blocksnet.method.connectivity.Connectivity.model_computed_fields"]], "plot() (blocksnet.method.connectivity.connectivity method)": [[6, "blocksnet.method.connectivity.Connectivity.plot"]], "plot() (blocksnet.method.connectivity.connectivity static method)": [[6, "id0"]], "diversity (class in blocksnet.method.diversity)": [[7, "blocksnet.method.diversity.Diversity"]], "_shannon_index() (blocksnet.method.diversity.diversity static method)": [[7, "blocksnet.method.diversity.Diversity._shannon_index"]], "blocksnet.method.diversity": [[7, "module-blocksnet.method.diversity"]], "calculate() (blocksnet.method.diversity.diversity method)": [[7, "blocksnet.method.diversity.Diversity.calculate"], [7, "id1"]], "model_computed_fields (blocksnet.method.diversity.diversity attribute)": [[7, "blocksnet.method.diversity.Diversity.model_computed_fields"]], "plot() (blocksnet.method.diversity.diversity method)": [[7, "blocksnet.method.diversity.Diversity.plot"]], "plot() (blocksnet.method.diversity.diversity static method)": [[7, "id0"]], "angular (blocksnet.method.integration.weighttype attribute)": [[8, "blocksnet.method.integration.WeightType.ANGULAR"]], "global (blocksnet.method.integration.integrationtype attribute)": [[8, "blocksnet.method.integration.IntegrationType.GLOBAL"]], "integration (class in blocksnet.method.integration)": [[8, "blocksnet.method.integration.Integration"]], "integrationtype (class in blocksnet.method.integration)": [[8, "blocksnet.method.integration.IntegrationType"]], "length (blocksnet.method.integration.weighttype attribute)": [[8, "blocksnet.method.integration.WeightType.LENGTH"]], "local (blocksnet.method.integration.integrationtype attribute)": [[8, "blocksnet.method.integration.IntegrationType.LOCAL"]], "weighttype (class in blocksnet.method.integration)": [[8, "blocksnet.method.integration.WeightType"]], "_get_dual_graph() (blocksnet.method.integration.integration method)": [[8, "blocksnet.method.integration.Integration._get_dual_graph"]], "blocks (blocksnet.method.integration.integration property)": [[8, "blocksnet.method.integration.Integration.blocks"]], "blocksnet.method.integration": [[8, "module-blocksnet.method.integration"]], "calculate() (blocksnet.method.integration.integration method)": [[8, "blocksnet.method.integration.Integration.calculate"]], "clusterize() (blocksnet.method.integration.integration method)": [[8, "blocksnet.method.integration.Integration.clusterize"]], "edges (blocksnet.method.integration.integration property)": [[8, "blocksnet.method.integration.Integration.edges"]], "graph (blocksnet.method.integration.integration attribute)": [[8, "blocksnet.method.integration.Integration.graph"]], "model_computed_fields (blocksnet.method.integration.integration attribute)": [[8, "blocksnet.method.integration.Integration.model_computed_fields"]], "plot() (blocksnet.method.integration.integration static method)": [[8, "blocksnet.method.integration.Integration.plot"]], "validate_graph() (blocksnet.method.integration.integration static method)": [[8, "blocksnet.method.integration.Integration.validate_graph"]], "validate_model() (blocksnet.method.integration.integration static method)": [[8, "blocksnet.method.integration.Integration.validate_model"]], "landuseprediction (class in blocksnet.method.land_use_prediction)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction"]], "_get_blocks_gdf() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._get_blocks_gdf"]], "_get_land_uses_services() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._get_land_uses_services"]], "_get_unique_per_landuse() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._get_unique_per_landuse"]], "_intersects() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._intersects"]], "_predict_block_landuse() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._predict_block_landuse"]], "_predict_block_landuse_cosine_similarity() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._predict_block_landuse_cosine_similarity"]], "blocksnet.method.land_use_prediction": [[9, "module-blocksnet.method.land_use_prediction"]], "calculate() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction.calculate"]], "model_computed_fields (blocksnet.method.land_use_prediction.landuseprediction attribute)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction.model_computed_fields"]], "plot() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction.plot"]], "populationcentrality (class in blocksnet.method.population_centrality)": [[10, "blocksnet.method.population_centrality.PopulationCentrality"]], "blocksnet.method.population_centrality": [[10, "module-blocksnet.method.population_centrality"]], "calculate() (blocksnet.method.population_centrality.populationcentrality method)": [[10, "blocksnet.method.population_centrality.PopulationCentrality.calculate"], [10, "id1"]], "model_computed_fields (blocksnet.method.population_centrality.populationcentrality attribute)": [[10, "blocksnet.method.population_centrality.PopulationCentrality.model_computed_fields"]], "plot() (blocksnet.method.population_centrality.populationcentrality method)": [[10, "blocksnet.method.population_centrality.PopulationCentrality.plot"]], "plot() (blocksnet.method.population_centrality.populationcentrality static method)": [[10, "id0"]], "gravitational (blocksnet.method.provision.provisionmethod attribute)": [[11, "blocksnet.method.provision.ProvisionMethod.GRAVITATIONAL"]], "greedy (blocksnet.method.provision.provisionmethod attribute)": [[11, "blocksnet.method.provision.ProvisionMethod.GREEDY"]], "linear (blocksnet.method.provision.provisionmethod attribute)": [[11, "blocksnet.method.provision.ProvisionMethod.LINEAR"]], "provision (class in blocksnet.method.provision)": [[11, "blocksnet.method.provision.Provision"]], "provisionmethod (class in blocksnet.method.provision)": [[11, "blocksnet.method.provision.ProvisionMethod"]], "_get_blocks_gdf() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision._get_blocks_gdf"]], "_get_lower_bound() (blocksnet.method.provision.provision static method)": [[11, "blocksnet.method.provision.Provision._get_lower_bound"]], "_get_upper_bound() (blocksnet.method.provision.provision static method)": [[11, "blocksnet.method.provision.Provision._get_upper_bound"]], "_greedy_provision() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision._greedy_provision"]], "_lp_provision() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision._lp_provision"]], "blocksnet.method.provision": [[11, "module-blocksnet.method.provision"]], "calculate() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.calculate"], [11, "id4"]], "get_bounds() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.get_bounds"], [11, "id3"]], "model_computed_fields (blocksnet.method.provision.provision attribute)": [[11, "blocksnet.method.provision.Provision.model_computed_fields"]], "plot() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.plot"], [11, "id0"]], "stat() (blocksnet.method.provision.provision class method)": [[11, "id1"]], "stat() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.stat"]], "total() (blocksnet.method.provision.provision class method)": [[11, "id2"]], "total() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.total"]], "spacematrix (class in blocksnet.method.spacematrix)": [[12, "blocksnet.method.spacematrix.Spacematrix"]], "_get_spacematrix_morphotypes() (blocksnet.method.spacematrix.spacematrix method)": [[12, "blocksnet.method.spacematrix.Spacematrix._get_spacematrix_morphotypes"]], "_get_strelka_morphotypes() (blocksnet.method.spacematrix.spacematrix static method)": [[12, "blocksnet.method.spacematrix.Spacematrix._get_strelka_morphotypes"]], "_name_spacematrix_morphotypes() (blocksnet.method.spacematrix.spacematrix static method)": [[12, "blocksnet.method.spacematrix.Spacematrix._name_spacematrix_morphotypes"]], "blocksnet.method.spacematrix": [[12, "module-blocksnet.method.spacematrix"]], "calculate() (blocksnet.method.spacematrix.spacematrix method)": [[12, "blocksnet.method.spacematrix.Spacematrix.calculate"], [12, "id1"]], "model_computed_fields (blocksnet.method.spacematrix.spacematrix attribute)": [[12, "blocksnet.method.spacematrix.Spacematrix.model_computed_fields"]], "number_of_clusters (blocksnet.method.spacematrix.spacematrix attribute)": [[12, "blocksnet.method.spacematrix.Spacematrix.number_of_clusters"]], "plot() (blocksnet.method.spacematrix.spacematrix method)": [[12, "blocksnet.method.spacematrix.Spacematrix.plot"]], "plot() (blocksnet.method.spacematrix.spacematrix static method)": [[12, "id0"]], "random_state (blocksnet.method.spacematrix.spacematrix attribute)": [[12, "blocksnet.method.spacematrix.Spacematrix.random_state"]], "vacantarea (class in blocksnet.method.vacant_area)": [[13, "blocksnet.method.vacant_area.VacantArea"]], "_dwn_amenity() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_amenity"]], "_dwn_buildings() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_buildings"]], "_dwn_highway() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_highway"]], "_dwn_landuse() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_landuse"]], "_dwn_leisure() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_leisure"]], "_dwn_natural() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_natural"]], "_dwn_other() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_other"]], "_dwn_path() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_path"]], "_dwn_railway() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_railway"]], "_dwn_waterway() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_waterway"]], "area_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.area_min"]], "area_to_length_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.area_to_length_min"]], "area_to_mrr_area_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.area_to_mrr_area_min"]], "blocks_buffer_max (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.blocks_buffer_max"]], "blocks_buffer_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.blocks_buffer_min"]], "blocksnet.method.vacant_area": [[13, "module-blocksnet.method.vacant_area"]], "buildings_buffer (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.buildings_buffer"]], "calculate() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea.calculate"]], "model_computed_fields (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.model_computed_fields"]], "path_buffer (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.path_buffer"]], "roads_buffer (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.roads_buffer"]], "blocksnet.models": [[14, "module-blocksnet.models"]], "block (class in blocksnet.models.city)": [[15, "blocksnet.models.city.Block"]], "blockservice (class in blocksnet.models.city)": [[15, "blocksnet.models.city.BlockService"]], "building (class in blocksnet.models.city)": [[15, "blocksnet.models.city.Building"]], "buildingservice (class in blocksnet.models.city)": [[15, "blocksnet.models.city.BuildingService"]], "city (class in blocksnet.models.city)": [[15, "blocksnet.models.city.City"]], "service (class in blocksnet.models.city)": [[15, "blocksnet.models.city.Service"]], "_() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block._"]], "_() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City._"]], "__getitem__() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block.__getitem__"]], "__hash__() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block.__hash__"]], "__str__() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.__str__"]], "_fill_capacity_and_area() (blocksnet.models.city.service class method)": [[15, "blocksnet.models.city.Service._fill_capacity_and_area"]], "_get_min_brick() (blocksnet.models.city.service class method)": [[15, "blocksnet.models.city.Service._get_min_brick"]], "add_service_type() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.add_service_type"], [15, "id8"]], "all_services (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.all_services"]], "area (blocksnet.models.city.service attribute)": [[15, "blocksnet.models.city.Service.area"]], "attach_geometry() (blocksnet.models.city.buildingservice class method)": [[15, "blocksnet.models.city.BuildingService.attach_geometry"]], "block (blocksnet.models.city.blockservice attribute)": [[15, "blocksnet.models.city.BlockService.block"]], "block (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.block"]], "blocks (blocksnet.models.city.city property)": [[15, "blocksnet.models.city.City.blocks"]], "blocksnet.models.city": [[15, "module-blocksnet.models.city"]], "build_floor_area (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.build_floor_area"]], "build_floor_area (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.build_floor_area"]], "building (blocksnet.models.city.buildingservice attribute)": [[15, "blocksnet.models.city.BuildingService.building"]], "buildings (blocksnet.models.city.block attribute)": [[15, "blocksnet.models.city.Block.buildings"]], "buildings (blocksnet.models.city.city property)": [[15, "blocksnet.models.city.City.buildings"]], "buildings_indicators (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.buildings_indicators"]], "business_area (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.business_area"]], "capacity (blocksnet.models.city.service attribute)": [[15, "blocksnet.models.city.Service.capacity"]], "city (blocksnet.models.city.block attribute)": [[15, "blocksnet.models.city.Block.city"]], "epsg (blocksnet.models.city.city property)": [[15, "blocksnet.models.city.City.epsg"]], "footprint_area (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.footprint_area"]], "footprint_area (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.footprint_area"]], "from_gdf() (blocksnet.models.city.block class method)": [[15, "blocksnet.models.city.Block.from_gdf"]], "from_pickle() (blocksnet.models.city.city static method)": [[15, "blocksnet.models.city.City.from_pickle"]], "fsi (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.fsi"]], "geometry (blocksnet.models.city.block attribute)": [[15, "blocksnet.models.city.Block.geometry"]], "geometry (blocksnet.models.city.blockservice attribute)": [[15, "blocksnet.models.city.BlockService.geometry"]], "geometry (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.geometry"]], "geometry (blocksnet.models.city.buildingservice attribute)": [[15, "blocksnet.models.city.BuildingService.geometry"]], "get_blocks_gdf() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.get_blocks_gdf"], [15, "id4"]], "get_buildings_gdf() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block.get_buildings_gdf"]], "get_buildings_gdf() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.get_buildings_gdf"], [15, "id2"]], "get_distance() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.get_distance"], [15, "id9"]], "get_in_edges() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.get_in_edges"], [15, "id11"]], "get_land_use_service_types() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.get_land_use_service_types"], [15, "id1"]], "get_out_edges() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.get_out_edges"], [15, "id10"]], "get_services_gdf() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block.get_services_gdf"]], "get_services_gdf() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.get_services_gdf"], [15, "id3"]], "gsi (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.gsi"]], "id (blocksnet.models.city.block attribute)": [[15, "blocksnet.models.city.Block.id"]], "id (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.id"]], "is_integrated (blocksnet.models.city.service attribute)": [[15, "blocksnet.models.city.Service.is_integrated"]], "is_living (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.is_living"]], "is_living (blocksnet.models.city.building property)": [[15, "blocksnet.models.city.Building.is_living"]], "l (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.l"]], "land_use (blocksnet.models.city.block attribute)": [[15, "blocksnet.models.city.Block.land_use"]], "land_use_service_types (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.land_use_service_types"]], "living_area (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.living_area"]], "living_area (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.living_area"]], "living_demand (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.living_demand"]], "loaded_service_types (blocksnet.models.city.city property)": [[15, "blocksnet.models.city.City.loaded_service_types"]], "model_computed_fields (blocksnet.models.city.block attribute)": [[15, "blocksnet.models.city.Block.model_computed_fields"]], "model_computed_fields (blocksnet.models.city.blockservice attribute)": [[15, "blocksnet.models.city.BlockService.model_computed_fields"]], "model_computed_fields (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.model_computed_fields"]], "model_computed_fields (blocksnet.models.city.buildingservice attribute)": [[15, "blocksnet.models.city.BuildingService.model_computed_fields"]], "model_computed_fields (blocksnet.models.city.service attribute)": [[15, "blocksnet.models.city.Service.model_computed_fields"]], "mxi (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.mxi"]], "non_living_area (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.non_living_area"]], "non_living_area (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.non_living_area"]], "number_of_floors (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.number_of_floors"]], "osr (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.osr"]], "plot() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.plot"], [15, "id0"]], "population (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.population"]], "population (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.population"]], "service_type (blocksnet.models.city.service attribute)": [[15, "blocksnet.models.city.Service.service_type"]], "service_types (blocksnet.models.city.city property)": [[15, "blocksnet.models.city.City.service_types"]], "services (blocksnet.models.city.block attribute)": [[15, "blocksnet.models.city.Block.services"]], "services (blocksnet.models.city.building attribute)": [[15, "blocksnet.models.city.Building.services"]], "services (blocksnet.models.city.city property)": [[15, "blocksnet.models.city.City.services"]], "services_indicators (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.services_indicators"]], "share_business (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.share_business"]], "share_living (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.share_living"]], "site_area (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.site_area"]], "territory_indicators (blocksnet.models.city.block property)": [[15, "blocksnet.models.city.Block.territory_indicators"]], "to_dict() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block.to_dict"]], "to_dict() (blocksnet.models.city.blockservice method)": [[15, "blocksnet.models.city.BlockService.to_dict"]], "to_dict() (blocksnet.models.city.building method)": [[15, "blocksnet.models.city.Building.to_dict"]], "to_dict() (blocksnet.models.city.buildingservice method)": [[15, "blocksnet.models.city.BuildingService.to_dict"]], "to_dict() (blocksnet.models.city.service method)": [[15, "blocksnet.models.city.Service.to_dict"]], "to_pickle() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.to_pickle"]], "update_buildings() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block.update_buildings"]], "update_buildings() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.update_buildings"], [15, "id6"]], "update_land_use() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.update_land_use"], [15, "id5"]], "update_services() (blocksnet.models.city.block method)": [[15, "blocksnet.models.city.Block.update_services"]], "update_services() (blocksnet.models.city.building method)": [[15, "blocksnet.models.city.Building.update_services"]], "update_services() (blocksnet.models.city.city method)": [[15, "blocksnet.models.city.City.update_services"], [15, "id7"]], "validate_land_use() (blocksnet.models.city.block static method)": [[15, "blocksnet.models.city.Block.validate_land_use"]], "validate_model() (blocksnet.models.city.blockservice class method)": [[15, "blocksnet.models.city.BlockService.validate_model"]], "validate_model() (blocksnet.models.city.building class method)": [[15, "blocksnet.models.city.Building.validate_model"]], "validate_model() (blocksnet.models.city.buildingservice class method)": [[15, "blocksnet.models.city.BuildingService.validate_model"]], "agriculture (blocksnet.models.land_use.landuse attribute)": [[16, "blocksnet.models.land_use.LandUse.AGRICULTURE"]], "business (blocksnet.models.land_use.landuse attribute)": [[16, "blocksnet.models.land_use.LandUse.BUSINESS"]], "industrial (blocksnet.models.land_use.landuse attribute)": [[16, "blocksnet.models.land_use.LandUse.INDUSTRIAL"]], "landuse (class in blocksnet.models.land_use)": [[16, "blocksnet.models.land_use.LandUse"]], "recreation (blocksnet.models.land_use.landuse attribute)": [[16, "blocksnet.models.land_use.LandUse.RECREATION"]], "residential (blocksnet.models.land_use.landuse attribute)": [[16, "blocksnet.models.land_use.LandUse.RESIDENTIAL"]], "special (blocksnet.models.land_use.landuse attribute)": [[16, "blocksnet.models.land_use.LandUse.SPECIAL"]], "transport (blocksnet.models.land_use.landuse attribute)": [[16, "blocksnet.models.land_use.LandUse.TRANSPORT"]], "blocksnet.models.land_use": [[16, "module-blocksnet.models.land_use"]], "baseschema (class in blocksnet.models.schema)": [[17, "blocksnet.models.schema.BaseSchema"]], "baseschema.config (class in blocksnet.models.schema)": [[17, "blocksnet.models.schema.BaseSchema.Config"]], "add_missing_columns (blocksnet.models.schema.baseschema.config attribute)": [[17, "blocksnet.models.schema.BaseSchema.Config.add_missing_columns"]], "blocksnet.models.schema": [[17, "module-blocksnet.models.schema"]], "check_geometry() (blocksnet.models.schema.baseschema class method)": [[17, "blocksnet.models.schema.BaseSchema.check_geometry"]], "geometry (blocksnet.models.schema.baseschema attribute)": [[17, "blocksnet.models.schema.BaseSchema.geometry"]], "idx (blocksnet.models.schema.baseschema attribute)": [[17, "blocksnet.models.schema.BaseSchema.idx"]], "name (blocksnet.models.schema.baseschema.config attribute)": [[17, "blocksnet.models.schema.BaseSchema.Config.name"]], "strict (blocksnet.models.schema.baseschema.config attribute)": [[17, "blocksnet.models.schema.BaseSchema.Config.strict"]], "to_gdf() (blocksnet.models.schema.baseschema class method)": [[17, "blocksnet.models.schema.BaseSchema.to_gdf"]], "servicebrick (class in blocksnet.models.service_type)": [[18, "blocksnet.models.service_type.ServiceBrick"]], "servicetype (class in blocksnet.models.service_type)": [[18, "blocksnet.models.service_type.ServiceType"]], "__hash__() (blocksnet.models.service_type.servicetype method)": [[18, "blocksnet.models.service_type.ServiceType.__hash__"]], "__str__() (blocksnet.models.service_type.servicetype method)": [[18, "blocksnet.models.service_type.ServiceType.__str__"]], "accessibility (blocksnet.models.service_type.servicetype attribute)": [[18, "blocksnet.models.service_type.ServiceType.accessibility"]], "area (blocksnet.models.service_type.servicebrick attribute)": [[18, "blocksnet.models.service_type.ServiceBrick.area"]], "blocksnet.models.service_type": [[18, "module-blocksnet.models.service_type"]], "bricks (blocksnet.models.service_type.servicetype attribute)": [[18, "blocksnet.models.service_type.ServiceType.bricks"]], "calculate_in_need() (blocksnet.models.service_type.servicetype method)": [[18, "blocksnet.models.service_type.ServiceType.calculate_in_need"]], "capacity (blocksnet.models.service_type.servicebrick attribute)": [[18, "blocksnet.models.service_type.ServiceBrick.capacity"]], "code (blocksnet.models.service_type.servicetype attribute)": [[18, "blocksnet.models.service_type.ServiceType.code"]], "demand (blocksnet.models.service_type.servicetype attribute)": [[18, "blocksnet.models.service_type.ServiceType.demand"]], "get_bricks() (blocksnet.models.service_type.servicetype method)": [[18, "blocksnet.models.service_type.ServiceType.get_bricks"]], "is_integrated (blocksnet.models.service_type.servicebrick attribute)": [[18, "blocksnet.models.service_type.ServiceBrick.is_integrated"]], "land_use (blocksnet.models.service_type.servicetype attribute)": [[18, "blocksnet.models.service_type.ServiceType.land_use"]], "model_computed_fields (blocksnet.models.service_type.servicebrick attribute)": [[18, "blocksnet.models.service_type.ServiceBrick.model_computed_fields"]], "model_computed_fields (blocksnet.models.service_type.servicetype attribute)": [[18, "blocksnet.models.service_type.ServiceType.model_computed_fields"]], "name (blocksnet.models.service_type.servicetype attribute)": [[18, "blocksnet.models.service_type.ServiceType.name"]], "parking_area (blocksnet.models.service_type.servicebrick attribute)": [[18, "blocksnet.models.service_type.ServiceBrick.parking_area"]], "to_dict() (blocksnet.models.service_type.servicetype method)": [[18, "blocksnet.models.service_type.ServiceType.to_dict"]], "validate_bricks() (blocksnet.models.service_type.servicetype method)": [[18, "blocksnet.models.service_type.ServiceType.validate_bricks"]], "validate_land_use() (blocksnet.models.service_type.servicetype method)": [[18, "blocksnet.models.service_type.ServiceType.validate_land_use"]], "blocksnet.preprocessing": [[19, "module-blocksnet.preprocessing"]], "accessibilityprocessor (class in blocksnet.preprocessing.accessibility_processor)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor"]], "blocksschema (class in blocksnet.preprocessing.accessibility_processor)": [[20, "blocksnet.preprocessing.accessibility_processor.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.accessibility_processor)": [[20, "blocksnet.preprocessing.accessibility_processor.BlocksSchema.Config"]], "_fix_graph() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor class method)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor._fix_graph"]], "_get_broken_nodes() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor static method)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor._get_broken_nodes"]], "_get_island_nodes() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor static method)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor._get_island_nodes"]], "blocksnet.preprocessing.accessibility_processor": [[20, "module-blocksnet.preprocessing.accessibility_processor"]], "get_accessibility_matrix() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor method)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.get_accessibility_matrix"]], "get_intermodal_graph() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor method)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.get_intermodal_graph"]], "name (blocksnet.preprocessing.accessibility_processor.blocksschema.config attribute)": [[20, "blocksnet.preprocessing.accessibility_processor.BlocksSchema.Config.name"]], "plot() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor static method)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.plot"]], "polygon (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor property)": [[20, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.polygon"]], "blocksgenerator (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksGenerator"]], "blocksschema (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksSchema.Config"]], "boundariesschema (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.BoundariesSchema"]], "boundariesschema.config (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.BoundariesSchema.Config"]], "railwaysschema (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.RailwaysSchema"]], "railwaysschema.config (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.RailwaysSchema.Config"]], "roadsschema (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.RoadsSchema"]], "roadsschema.config (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.RoadsSchema.Config"]], "waterschema (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.WaterSchema"]], "waterschema.config (class in blocksnet.preprocessing.blocks_generator)": [[21, "blocksnet.preprocessing.blocks_generator.WaterSchema.Config"]], "_get_enclosures() (blocksnet.preprocessing.blocks_generator.blocksgenerator static method)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksGenerator._get_enclosures"]], "_reindex_blocks() (blocksnet.preprocessing.blocks_generator.blocksgenerator static method)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksGenerator._reindex_blocks"]], "blocksnet.preprocessing.blocks_generator": [[21, "module-blocksnet.preprocessing.blocks_generator"]], "local_crs (blocksnet.preprocessing.blocks_generator.blocksgenerator property)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksGenerator.local_crs"]], "name (blocksnet.preprocessing.blocks_generator.blocksschema.config attribute)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.boundariesschema.config attribute)": [[21, "blocksnet.preprocessing.blocks_generator.BoundariesSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.railwaysschema.config attribute)": [[21, "blocksnet.preprocessing.blocks_generator.RailwaysSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.roadsschema.config attribute)": [[21, "blocksnet.preprocessing.blocks_generator.RoadsSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.waterschema.config attribute)": [[21, "blocksnet.preprocessing.blocks_generator.WaterSchema.Config.name"]], "run() (blocksnet.preprocessing.blocks_generator.blocksgenerator method)": [[21, "blocksnet.preprocessing.blocks_generator.BlocksGenerator.run"], [21, "id0"]], "blocksschema (class in blocksnet.preprocessing.blocks_splitter)": [[22, "blocksnet.preprocessing.blocks_splitter.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.blocks_splitter)": [[22, "blocksnet.preprocessing.blocks_splitter.BlocksSchema.Config"]], "blockssplitter (class in blocksnet.preprocessing.blocks_splitter)": [[22, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter"]], "buildingsschema (class in blocksnet.preprocessing.blocks_splitter)": [[22, "blocksnet.preprocessing.blocks_splitter.BuildingsSchema"]], "buildingsschema.config (class in blocksnet.preprocessing.blocks_splitter)": [[22, "blocksnet.preprocessing.blocks_splitter.BuildingsSchema.Config"]], "_drop_index_columns() (blocksnet.preprocessing.blocks_splitter.blockssplitter static method)": [[22, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter._drop_index_columns"]], "_split_block() (blocksnet.preprocessing.blocks_splitter.blockssplitter static method)": [[22, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter._split_block"]], "blocksnet.preprocessing.blocks_splitter": [[22, "module-blocksnet.preprocessing.blocks_splitter"]], "name (blocksnet.preprocessing.blocks_splitter.blocksschema.config attribute)": [[22, "blocksnet.preprocessing.blocks_splitter.BlocksSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_splitter.buildingsschema.config attribute)": [[22, "blocksnet.preprocessing.blocks_splitter.BuildingsSchema.Config.name"]], "run() (blocksnet.preprocessing.blocks_splitter.blockssplitter method)": [[22, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter.run"], [22, "id0"]], "blocksschema (class in blocksnet.preprocessing.land_use_optimizer)": [[23, "blocksnet.preprocessing.land_use_optimizer.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.land_use_optimizer)": [[23, "blocksnet.preprocessing.land_use_optimizer.BlocksSchema.Config"]], "landuseoptimizer (class in blocksnet.preprocessing.land_use_optimizer)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer"]], "_check_adj_rules() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._check_adj_rules"]], "_check_area_ranges() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._check_area_ranges"]], "_check_ratio_ranges() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._check_ratio_ranges"]], "_generate_initial_x() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._generate_initial_X"]], "_get_adjacency_graph() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer class method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._get_adjacency_graph"]], "_is_block_large() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer static method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._is_block_large"]], "_objective() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._objective"]], "_perturb() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer static method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._perturb"]], "_split_large_blocks() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer class method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._split_large_blocks"]], "_split_polygon() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer static method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._split_polygon"]], "blocksnet.preprocessing.land_use_optimizer": [[23, "module-blocksnet.preprocessing.land_use_optimizer"]], "name (blocksnet.preprocessing.land_use_optimizer.blocksschema.config attribute)": [[23, "blocksnet.preprocessing.land_use_optimizer.BlocksSchema.Config.name"]], "run() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer.run"]], "to_gdf() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer.to_gdf"]], "to_shares_dict() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[23, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer.to_shares_dict"]], "blocksschema (class in blocksnet.preprocessing.land_use_processor)": [[24, "blocksnet.preprocessing.land_use_processor.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.land_use_processor)": [[24, "blocksnet.preprocessing.land_use_processor.BlocksSchema.Config"]], "landuseprocessor (class in blocksnet.preprocessing.land_use_processor)": [[24, "blocksnet.preprocessing.land_use_processor.LandUseProcessor"]], "processedblocksschema (class in blocksnet.preprocessing.land_use_processor)": [[24, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema"]], "processedblocksschema.config (class in blocksnet.preprocessing.land_use_processor)": [[24, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.Config"]], "zonesschema (class in blocksnet.preprocessing.land_use_processor)": [[24, "blocksnet.preprocessing.land_use_processor.ZonesSchema"]], "zonesschema.config (class in blocksnet.preprocessing.land_use_processor)": [[24, "blocksnet.preprocessing.land_use_processor.ZonesSchema.Config"]], "blocksnet.preprocessing.land_use_processor": [[24, "module-blocksnet.preprocessing.land_use_processor"]], "land_use (blocksnet.preprocessing.land_use_processor.processedblocksschema attribute)": [[24, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.land_use"]], "name (blocksnet.preprocessing.land_use_processor.blocksschema.config attribute)": [[24, "blocksnet.preprocessing.land_use_processor.BlocksSchema.Config.name"]], "name (blocksnet.preprocessing.land_use_processor.processedblocksschema.config attribute)": [[24, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.Config.name"]], "name (blocksnet.preprocessing.land_use_processor.zonesschema.config attribute)": [[24, "blocksnet.preprocessing.land_use_processor.ZonesSchema.Config.name"]], "run() (blocksnet.preprocessing.land_use_processor.landuseprocessor method)": [[24, "blocksnet.preprocessing.land_use_processor.LandUseProcessor.run"], [24, "id0"]], "zone (blocksnet.preprocessing.land_use_processor.processedblocksschema attribute)": [[24, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.zone"]], "zone (blocksnet.preprocessing.land_use_processor.zonesschema attribute)": [[24, "blocksnet.preprocessing.land_use_processor.ZonesSchema.zone"]], "blocksnet.utils": [[25, "module-blocksnet.utils"]], "blocksnet.utils.helpers": [[26, "module-blocksnet.utils.helpers"]], "drop_contained_geometries() (in module blocksnet.utils.helpers)": [[26, "blocksnet.utils.helpers.drop_contained_geometries"]], "fill_holes() (in module blocksnet.utils.helpers)": [[26, "blocksnet.utils.helpers.fill_holes"]], "filter_bottlenecks() (in module blocksnet.utils.helpers)": [[26, "blocksnet.utils.helpers.filter_bottlenecks"]], "get_polygon_aspect_ratio() (in module blocksnet.utils.helpers)": [[26, "blocksnet.utils.helpers.get_polygon_aspect_ratio"]], "blocksnet.utils.service_types": [[27, "module-blocksnet.utils.service_types"]]}})